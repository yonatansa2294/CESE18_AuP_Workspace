
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aa8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d50  08004d50  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d58  08004d58  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d58  08004d58  00014d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d5c  08004d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08004d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
 10 .bss          00000840  200000ec  200000ec  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000092c  2000092c  000200ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000d680  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000fbe1  00000000  00000000  0002d79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002006  00000000  00000000  0003d37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c58  00000000  00000000  0003f388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000dc54e  00000000  00000000  0003ffe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000b80  00000000  00000000  0011c530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024d66  00000000  00000000  0011d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141e16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b64  00000000  00000000  00141e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004c40 	.word	0x08004c40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f0 	.word	0x200000f0
 80001ec:	08004c40 	.word	0x08004c40

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <asm_zeros>:
@   r0: dirección de memoria apuntando al primer elemento del vector
@   r1: cantidad de elementos del vector (longitud)
@
.thumb_func					@ Se le indica al ensamblador que es una funcion
	asm_zeros:
		push	{R2}		@ guardo el valor de r2 en el stack
 80001f8:	b404      	push	{r2}
		movs	R2,#0		@ r2 = 0
 80001fa:	2200      	movs	r2, #0

080001fc <loop_zeros>:
	loop_zeros:
		str		R2,[R0],#4	@ *r2=r0 y luego r0+=4
 80001fc:	f840 2b04 	str.w	r2, [r0], #4
		subs	R1,1		@ r1-- (decremento el numero de elementos por recorrer)
 8000200:	3901      	subs	r1, #1
		bne		loop_zeros	@ salta si z=0 debido a que r1!=0 (faltan elementos por recorrer)
 8000202:	d1fb      	bne.n	80001fc <loop_zeros>

08000204 <exit_loop_zeros>:
	exit_loop_zeros:
		pop		{R2}		@ recupero el valor de r2
 8000204:	bc04      	pop	{r2}
		bx 		lr			@ retorno de la subrutina
 8000206:	4770      	bx	lr

08000208 <asm_productoEscalar32>:
@	r2: cantidad de elementos del vector (longitud)
@	r3: escalar
@
.thumb_func					@ Se le indica al ensamblador que es una funcion
	asm_productoEscalar32:
		push	{R4}		@ guardo el valor de r4 en el stack
 8000208:	b410      	push	{r4}
		movs	R4,#0		@ r4 = 0
 800020a:	2400      	movs	r4, #0

0800020c <loop_prod32>:
	loop_prod32:
		ldr		R4,[R0],#4	@ r4=*r0 y luego r0+=4
 800020c:	f850 4b04 	ldr.w	r4, [r0], #4
		muls	R4,R3		@ r4*=r3
 8000210:	435c      	muls	r4, r3
		str		R4,[R1],#4	@ *r4=r1 y luego r1+=4
 8000212:	f841 4b04 	str.w	r4, [r1], #4
		subs	R2,1		@ r2-- (decremento el numero de elementos por recorrer)
 8000216:	3a01      	subs	r2, #1
		bne		loop_prod32	@ salta si z=0 debido a que r2!=0 (faltan elementos por recorrer)
 8000218:	d1f8      	bne.n	800020c <loop_prod32>

0800021a <exit_loop_prod32>:
	exit_loop_prod32:
		pop		{R4}		@ recupero el valor de r4
 800021a:	bc10      	pop	{r4}
		bx 		lr			@ retorno de la subrutina
 800021c:	4770      	bx	lr

0800021e <asm_productoEscalar16>:
@	r2: cantidad de elementos del vector (longitud)
@	r3: escalar
@
.thumb_func					@ Se le indica al ensamblador que es una funcion
	asm_productoEscalar16:
		push	{R4}		@ guardo el valor de r4 en el stack
 800021e:	b410      	push	{r4}
		movs	R4,#0		@ r4 = 0
 8000220:	2400      	movs	r4, #0

08000222 <loop_prod16>:
	loop_prod16:
		ldrh	R4,[R0],#2	@ r4=(*r0) y luego r0+=2
 8000222:	f830 4b02 	ldrh.w	r4, [r0], #2
		muls	R4,R3		@ r4*=r3
 8000226:	435c      	muls	r4, r3
		strh	R4,[r1],#2	@ (*r4)=r1 y luego r1+=2
 8000228:	f821 4b02 	strh.w	r4, [r1], #2
		subs	R2,1		@ r2-- (decremento el numero de elementos por recorrer)
 800022c:	3a01      	subs	r2, #1
		bne		loop_prod16	@ salta si z=0 debido a que r2!=0 (faltan elementos por recorrer)
 800022e:	d1f8      	bne.n	8000222 <loop_prod16>

08000230 <exit_loop_prod16>:
	exit_loop_prod16:
		pop		{R4}		@ recupero el valor de r4
 8000230:	bc10      	pop	{r4}
		bx 		lr			@ retorno de la subrutina
 8000232:	4770      	bx	lr

08000234 <asm_productoEscalar12>:
@	r2: cantidad de elementos del vector (longitud)
@	r3: escalar
@
.thumb_func						@ Se le indica al ensamblador que es una funcion
	asm_productoEscalar12:
		push	{R4}			@ guardo el valor de r4 en el stack
 8000234:	b410      	push	{r4}
		movs	R4,#0			@ r4 = 0
 8000236:	2400      	movs	r4, #0

08000238 <loop_prod12>:
	loop_prod12:
		ldrh	R4,[R0],#2		@ r4=(*r0) y luego r0+=2
 8000238:	f830 4b02 	ldrh.w	r4, [r0], #2
		muls	R4,R3			@ r4*=r3
 800023c:	435c      	muls	r4, r3
		usat	R4,#12,R4		@ saturamos el valor de r4 y lo guardamos en el mismo registro
 800023e:	f384 040c 	usat	r4, #12, r4
		strh	R4,[R1],#2		@ (*r4)=r1 y luego r1+=2
 8000242:	f821 4b02 	strh.w	r4, [r1], #2
		subs	R2,1			@ r2-- (decremento el numero de elementos por recorrer)
 8000246:	3a01      	subs	r2, #1
		bne		loop_prod12		@ salta si z=0 debido a que r2!=0 (faltan elementos por recorrer)
 8000248:	d1f6      	bne.n	8000238 <loop_prod12>

0800024a <exit_loop_prod12>:
	exit_loop_prod12:
		pop		{R4}			@ recupero el valor de r4
 800024a:	bc10      	pop	{r4}
		bx 		lr				@ retorno de la subrutina
 800024c:	4770      	bx	lr

0800024e <asm_filtroVentana10>:
@   r1: dirección de memoria apuntando al primer elemento del vector de salida
@	r2: cantidad de elementos del vector (longitud)
@
.thumb_func								@ Se le indica al ensamblador que es una funcion
	asm_filtroVentana10:
		push	{R4-R10}				@ guardo el valor de r4 a r10 en el stack
 800024e:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
		movs	R4,#0					@ pivote
 8000252:	2400      	movs	r4, #0
		movs	R8,#0
 8000254:	f05f 0800 	movs.w	r8, #0
		mov		R9,R2					@ logitud vector
 8000258:	4691      	mov	r9, r2

0800025a <loop_shift_piv>:
	loop_shift_piv:
		movs	R5,#0					@ reinicio muestras = 0
 800025a:	2500      	movs	r5, #0
		movs	R6,#0					@ reinicio suma acumulada = 0
 800025c:	2600      	movs	r6, #0
		movs	R7,#1					@ reinicio corrimientos = 1
 800025e:	2701      	movs	r7, #1

08000260 <loop_shift_left_window>:
	loop_shift_left_window:
		subs	R8,R4,R7				@ calculo el indice anterior al pivote
 8000260:	ebb4 0807 	subs.w	r8, r4, r7
		ITTT	PL						@ verifico si el indice es >= 0
 8000264:	bf5e      	ittt	pl
		ldrhPL	R10,[R0,R8,LSL 1]		@ r10=*(r0+(r8<<1))
 8000266:	f830 a018 	ldrhpl.w	sl, [r0, r8, lsl #1]
		addPL	R6,R10					@ actualizo la suma acumulada sin afectar APSR
 800026a:	4456      	addpl	r6, sl
		addPL	R5,#1					@ muestras++ sin afectar APSR
 800026c:	3501      	addpl	r5, #1

0800026e <shift_right_window>:
	shift_right_window:
		adds	R8,R4,R7				@ calculo el indice posterior al pivote
 800026e:	eb14 0807 	adds.w	r8, r4, r7
		cmp		R9,R8					@ verifico si el indice es menor que la longitud
 8000272:	45c1      	cmp	r9, r8
		ITTT	HI
 8000274:	bf82      	ittt	hi
		ldrhHI	R10,[R0,R8,LSL 1]		@ r10=*(r0+(r8<<1))
 8000276:	f830 a018 	ldrhhi.w	sl, [r0, r8, lsl #1]
		addHI	R6,R10					@ actualizo la suma acumulada sin afectar APSR
 800027a:	4456      	addhi	r6, sl
		addHI	R5,#1					@ muestras++ sin afectar APSR
 800027c:	3501      	addhi	r5, #1

0800027e <iterations>:
	iterations:
		cmp		R7,#5					@ comparamos el numero de iteraciones con el valor de la mitad de la ventana
 800027e:	2f05      	cmp	r7, #5
		add		R7,#1					@ iteraciones++ sin afectar el APSR
 8000280:	f107 0701 	add.w	r7, r7, #1
		ITTE	EQ						@ verifica si son iguales
 8000284:	bf06      	itte	eq

08000286 <mean>:
	mean:
		udivEQ	R8,R6,R5				@ calculo el promedio
 8000286:	fbb6 f8f5 	udiveq	r8, r6, r5
		strhEQ	R8,[R1],#2				@ cargamos el valor a memoria
 800028a:	f821 8b02 	strheq.w	r8, [r1], #2
		bNE		loop_shift_left_window	@ en caso falte iterar retornamos
 800028e:	e7e7      	bne.n	8000260 <loop_shift_left_window>
		adds	R4,#1					@ pivote++
 8000290:	3401      	adds	r4, #1
		cmp		R4,R9					@ comparamos si no alcanzamos el indicie maximo del vector
 8000292:	454c      	cmp	r4, r9
		bne		loop_shift_piv			@ volvemos a repetir el ciclo, caso contrario terminamos
 8000294:	d1e1      	bne.n	800025a <loop_shift_piv>

08000296 <exit_loop_filtro>:
	exit_loop_filtro:
		pop		{R4-R10}				@ recupero el valor de r4
 8000296:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
		bx		lr					@ retorno de la subrutina
 800029a:	4770      	bx	lr

0800029c <asm_pack32to16>:
@   r1: dirección de memoria apuntando al primer elemento del vector de salida
@	r2: cantidad de elementos del vector (longitud)
@
.thumb_func							@ Se le indica al ensamblador que es una funcion
	asm_pack32to16:
		push	{R4}				@ guardo el valor de r4 y r5 en el stack
 800029c:	b410      	push	{r4}
		movs	R4,#0				@ r4 = 0
 800029e:	2400      	movs	r4, #0

080002a0 <loop_pack>:
	loop_pack:
		ldr		R4,[R0],#4			@ r4=*r0 y luego r0+=4
 80002a0:	f850 4b04 	ldr.w	r4, [r0], #4
		sxth 	R4, R4, ROR #16		@ r4=(int16)(*r4>>16)
 80002a4:	fa0f f4a4 	sxth.w	r4, r4, ror #16
		strh	R4,[R1],#2			@ *r4=r1 y luego r1+=2
 80002a8:	f821 4b02 	strh.w	r4, [r1], #2
		subs	R2,#1				@ r2-- (decremento el numero de elementos por recorrer)
 80002ac:	3a01      	subs	r2, #1
		bne		loop_pack			@ salta si z=0 debido a que r2!=0 (faltan elementos por recorrer)
 80002ae:	d1f7      	bne.n	80002a0 <loop_pack>

080002b0 <exit_loop_pack>:
	exit_loop_pack:
		pop		{R4}				@ recupero el valor de r4
 80002b0:	bc10      	pop	{r4}
		bx		lr					@ retorno de la subrutina
 80002b2:	4770      	bx	lr

080002b4 <asm_max>:
@   r0: dirección de memoria apuntando al primer elemento del vector de entrada
@	r1: cantidad de elementos del vector (longitud)
@
.thumb_func
	asm_max:
		push	{R4-R7}
 80002b4:	b4f0      	push	{r4, r5, r6, r7}
		movs	R4,#0			@ registro para almacenar el maximo valor
 80002b6:	2400      	movs	r4, #0
		movs	R5,#0			@ registro para almacenar el valor actual
 80002b8:	2500      	movs	r5, #0
		movs	R6,#0			@ registro para el indice del vector
 80002ba:	2600      	movs	r6, #0
		movs	R7,#0			@ registro para el indice del maximo valor
 80002bc:	2700      	movs	r7, #0
		ldr		R4,[R0],#4		@ copio el primer elemento del vector para tomarlo como el maximo valor, luego R0+=4}
 80002be:	f850 4b04 	ldr.w	r4, [r0], #4
		adds	R6,#1			@ indice++
 80002c2:	3601      	adds	r6, #1

080002c4 <loop_max>:
	loop_max:
		ldr		R5,[R0],#4		@ R5 tiene el valor actual a comparar con el maximo valor actual
 80002c4:	f850 5b04 	ldr.w	r5, [r0], #4
		cmp		R5,R4			@ compara si R5(valor actual) > R4(maximo valor actual) -> R5-R4
 80002c8:	42a5      	cmp	r5, r4
		ITT		GT				@ ejecuta dos instrucciones si R5>R4
 80002ca:	bfc4      	itt	gt
		movgt	R4,R5			@ actualizo R4(maximo valor)
 80002cc:	462c      	movgt	r4, r5
		movgt	R7,R6			@ actualizo el indice donde se encontro el maximo valor
 80002ce:	4637      	movgt	r7, r6
		adds	R6,#1			@ indice++
 80002d0:	3601      	adds	r6, #1
		cmp		R1,R6
 80002d2:	42b1      	cmp	r1, r6
		bne		loop_max		@ salta si z=0 debido a que r1!=r6 (faltan elementos por recorrer)
 80002d4:	d1f6      	bne.n	80002c4 <loop_max>

080002d6 <exit_loop_max>:
	exit_loop_max:
		mov		R0,R7			@ retorno el valor del indice
 80002d6:	4638      	mov	r0, r7
		pop		{R4-R7}			@ recupero los valores de r4-r7
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
		bx		lr				@ retorno de la subrutina
 80002da:	4770      	bx	lr

080002dc <asm_downsampleM>:
@	r2: cantidad de elementos del vector (longitud)
@	r3: numero de N muestras por la cual se debe descartar un elemento del vector de entrada
@
.thumb_func
	asm_downsampleM:
		push	{R4-R5}				@ resguardo registros para operaciones
 80002dc:	b430      	push	{r4, r5}
		movs	R4,#0				@ registro para guardar los valores del vector de entrada
 80002de:	2400      	movs	r4, #0
		movs	R5,#0				@ contador de muestras
 80002e0:	2500      	movs	r5, #0

080002e2 <loop_downsampleM>:
	loop_downsampleM:
		ldr		R4,[R0],#4			@ r4=*r0 , luego r0+=4
 80002e2:	f850 4b04 	ldr.w	r4, [r0], #4
		adds	R5,#1				@ incrementamos contador de muestras
 80002e6:	3501      	adds	r5, #1
		cmp		R3,R5				@ comparamos el numero de muestras tomadas con N -> R3-R5
 80002e8:	42ab      	cmp	r3, r5
		ITE		NE					@ evalua si R3=R5
 80002ea:	bf14      	ite	ne
		strne	R4,[R1],#4			@ *r4=r1, luego r1+=4
 80002ec:	f841 4b04 	strne.w	r4, [r1], #4
		movseq	R5,#0				@ reinicia contador de muestras
 80002f0:	f05f 0500 	movseq.w	r5, #0
		subs	R2,#1				@ decremento el numero de elementos por recorrer
 80002f4:	3a01      	subs	r2, #1
		bne		loop_downsampleM	@ salta si z=0 debido a que r2!=0 (faltan elementos por recorrer)
 80002f6:	d1f4      	bne.n	80002e2 <loop_downsampleM>

080002f8 <exit_loop_downsampleM>:
	exit_loop_downsampleM:
		pop		{R4-R5}				@ recupero los valores de r4 y r5
 80002f8:	bc30      	pop	{r4, r5}
		bx		lr					@ retorno de la subrutina
 80002fa:	4770      	bx	lr

080002fc <asm_invertir>:
@   r0: dirección de memoria apuntando al primer elemento del vector de entrada
@	r1: cantidad de elementos del vector (longitud)
@
.thumb_func
	asm_invertir:
		push	{R4-R8}
 80002fc:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
		movs	R4,#0				@ registro para guardar valor temporal
 8000300:	2400      	movs	r4, #0
		movs	R5,#0				@ registro para guardar valor en la poscion actual + offset2
 8000302:	2500      	movs	r5, #0
		movs	R6,#2				@ registro para guardar numero de intercambios
 8000304:	2602      	movs	r6, #2
		udiv	R6,R1,R6			@ valor maximo de intercambios.
 8000306:	fbb1 f6f6 	udiv	r6, r1, r6
		movs	R7,#0				@ offset1 para ir de inicio -> fin
 800030a:	2700      	movs	r7, #0
		movs	R8,#0				@ ofsset2 para ir de fin -> inicio
 800030c:	f05f 0800 	movs.w	r8, #0
		subs	R1,#1				@ longitud--
 8000310:	3901      	subs	r1, #1

08000312 <loop_invertir>:
	loop_invertir:
		ldrh	R4,[R0,R7,LSL 1]	@ r4 = *(r0+(r7<<1)) -> temp = v[i]
 8000312:	f830 4017 	ldrh.w	r4, [r0, r7, lsl #1]
		subs	R8,R1,R7			@ r8 = r1-r7 -> longitud-i
 8000316:	ebb1 0807 	subs.w	r8, r1, r7
		ldrh	R5,[R0,R8,LSL 1]    @ r5=*(r0+(r8<<1))
 800031a:	f830 5018 	ldrh.w	r5, [r0, r8, lsl #1]
		strh	R5,[R0,R7,LSL 1]	@ *r5=r0+(r7<<1) -> v[i]=v[longitud-i]
 800031e:	f820 5017 	strh.w	r5, [r0, r7, lsl #1]
		strh	R4,[R0,R8,LSL 1]	@ *r4=r0+(r8<<1) -> v[longitud-i]=temp
 8000322:	f820 4018 	strh.w	r4, [r0, r8, lsl #1]
		adds	R7,#1				@ offset1++
 8000326:	3701      	adds	r7, #1
		cmp		R7,R6				@ comparamos si realizamos el numero de intercambios maximos
 8000328:	42b7      	cmp	r7, r6
		bne		loop_invertir		@ salta si z=0 debido a que r7!=r6 (faltan elementos por recorrer)
 800032a:	d1f2      	bne.n	8000312 <loop_invertir>

0800032c <exit_loop_invertir>:
	exit_loop_invertir:
		push	{R4-R8}				@ recupero los valores de R4-R8
 800032c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
		bx		lr					@ retorno de la subrutina
 8000330:	4770      	bx	lr

08000332 <asm_corr>:
@	r2: direccion del vector de correlación
@	r3: cantidad de elementos del vector (longitud)
@
.thumb_func
	asm_corr:
		push	{R4-R9}
 8000332:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
		movs	R4,#1				@ delay
 8000336:	2401      	movs	r4, #1
		movs	R6,#0				@ index de vector x
 8000338:	2600      	movs	r6, #0
		movs	R7,#0				@ index de vector y
 800033a:	2700      	movs	r7, #0
		movs	R8,#1
 800033c:	f05f 0801 	movs.w	r8, #1
		movs	R9,#0
 8000340:	f05f 0900 	movs.w	r9, #0
		mls		R4,R3,R8,R4			@ r4 = r3*r8+r4 -> delay = 1-longitud = delay_max
 8000344:	fb03 4418 	mls	r4, r3, r8, r4

08000348 <loop_delay>:
	loop_delay:
		cmp		R4,R3				@ delay < longitud?
 8000348:	429c      	cmp	r4, r3
		bGT		exit_loop_corr		@ si es mayor, ha terminado la correlación
 800034a:	dc18      	bgt.n	800037e <exit_loop_corr>
		movs	R5,#0				@ suma acum = 0
 800034c:	2500      	movs	r5, #0
		movs	R6,#0				@ indexX = 0
 800034e:	2600      	movs	r6, #0

08000350 <loop_sum_prod>:
	loop_sum_prod:
		cmp		R6,R3				@ indexX > longitud
 8000350:	429e      	cmp	r6, r3
		bGE		save_value			@ si es mayor, se ha calculado xn*yn para el primer shift de y[n]
 8000352:	da10      	bge.n	8000376 <save_value>
		adds	R7,R6,R4			@ actualizo indexY
 8000354:	1937      	adds	r7, r6, r4
		cmp		R7,#0				@ r7 < 0?
 8000356:	2f00      	cmp	r7, #0
		bLT		next_iter_sum_prod	@ si es menor, saltamos a la siguiente iteracion al no estar definidos y[n+L]
 8000358:	db0b      	blt.n	8000372 <next_iter_sum_prod>

0800035a <sum_prod>:
	sum_prod:
		cmp		R7,R3				@ r7 > longitud?
 800035a:	429f      	cmp	r7, r3
		bGT		next_iter_sum_prod	@ si es mayor, saltamos a la siguiente iteración
 800035c:	dc09      	bgt.n	8000372 <next_iter_sum_prod>
		ldrh	R8,[R0,R7,LSL 1]	@ r8 = *(r0+(r7<<1) -> r8= x[n+indexY]
 800035e:	f830 8017 	ldrh.w	r8, [r0, r7, lsl #1]
		sxth	R8,R8				@ r8=(int16)(*r8)
 8000362:	fa0f f888 	sxth.w	r8, r8
		ldrh	R9,[R1,R6,LSL 1]	@ r9 = *(r1+(r6<<1) -> r9= y[n+indexX]
 8000366:	f831 9016 	ldrh.w	r9, [r1, r6, lsl #1]
		sxth	R9,R9				@ @ r8=(int16)(*r8)
 800036a:	fa0f f989 	sxth.w	r9, r9
		smlabb	R5,R8,R9,R5			@ r5 = r5 + r8[15:0]*r9[15:0]
 800036e:	fb18 5509 	smlabb	r5, r8, r9, r5

08000372 <next_iter_sum_prod>:
	next_iter_sum_prod:
		adds	R6,#1				@ indexX++
 8000372:	3601      	adds	r6, #1
		b		loop_sum_prod
 8000374:	e7ec      	b.n	8000350 <loop_sum_prod>

08000376 <save_value>:
	save_value:
		strh	R5,[R2],#2			@ *r5=r2, luego r2+=2
 8000376:	f822 5b02 	strh.w	r5, [r2], #2
		adds	R4,#1				@ delay++
 800037a:	3401      	adds	r4, #1
		b		loop_delay
 800037c:	e7e4      	b.n	8000348 <loop_delay>

0800037e <exit_loop_corr>:
	exit_loop_corr:
		pop		{R4-R9}				@ recuperamos los registros r4-r9
 800037e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
		bx		lr					@ retorno de la subrutina
 8000382:	4770      	bx	lr
	...

08000390 <memchr>:
 8000390:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000394:	2a10      	cmp	r2, #16
 8000396:	db2b      	blt.n	80003f0 <memchr+0x60>
 8000398:	f010 0f07 	tst.w	r0, #7
 800039c:	d008      	beq.n	80003b0 <memchr+0x20>
 800039e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a2:	3a01      	subs	r2, #1
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d02d      	beq.n	8000404 <memchr+0x74>
 80003a8:	f010 0f07 	tst.w	r0, #7
 80003ac:	b342      	cbz	r2, 8000400 <memchr+0x70>
 80003ae:	d1f6      	bne.n	800039e <memchr+0xe>
 80003b0:	b4f0      	push	{r4, r5, r6, r7}
 80003b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003ba:	f022 0407 	bic.w	r4, r2, #7
 80003be:	f07f 0700 	mvns.w	r7, #0
 80003c2:	2300      	movs	r3, #0
 80003c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003c8:	3c08      	subs	r4, #8
 80003ca:	ea85 0501 	eor.w	r5, r5, r1
 80003ce:	ea86 0601 	eor.w	r6, r6, r1
 80003d2:	fa85 f547 	uadd8	r5, r5, r7
 80003d6:	faa3 f587 	sel	r5, r3, r7
 80003da:	fa86 f647 	uadd8	r6, r6, r7
 80003de:	faa5 f687 	sel	r6, r5, r7
 80003e2:	b98e      	cbnz	r6, 8000408 <memchr+0x78>
 80003e4:	d1ee      	bne.n	80003c4 <memchr+0x34>
 80003e6:	bcf0      	pop	{r4, r5, r6, r7}
 80003e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003ec:	f002 0207 	and.w	r2, r2, #7
 80003f0:	b132      	cbz	r2, 8000400 <memchr+0x70>
 80003f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003f6:	3a01      	subs	r2, #1
 80003f8:	ea83 0301 	eor.w	r3, r3, r1
 80003fc:	b113      	cbz	r3, 8000404 <memchr+0x74>
 80003fe:	d1f8      	bne.n	80003f2 <memchr+0x62>
 8000400:	2000      	movs	r0, #0
 8000402:	4770      	bx	lr
 8000404:	3801      	subs	r0, #1
 8000406:	4770      	bx	lr
 8000408:	2d00      	cmp	r5, #0
 800040a:	bf06      	itte	eq
 800040c:	4635      	moveq	r5, r6
 800040e:	3803      	subeq	r0, #3
 8000410:	3807      	subne	r0, #7
 8000412:	f015 0f01 	tst.w	r5, #1
 8000416:	d107      	bne.n	8000428 <memchr+0x98>
 8000418:	3001      	adds	r0, #1
 800041a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800041e:	bf02      	ittt	eq
 8000420:	3001      	addeq	r0, #1
 8000422:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000426:	3001      	addeq	r0, #1
 8000428:	bcf0      	pop	{r4, r5, r6, r7}
 800042a:	3801      	subs	r0, #1
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop

08000430 <__aeabi_uldivmod>:
 8000430:	b953      	cbnz	r3, 8000448 <__aeabi_uldivmod+0x18>
 8000432:	b94a      	cbnz	r2, 8000448 <__aeabi_uldivmod+0x18>
 8000434:	2900      	cmp	r1, #0
 8000436:	bf08      	it	eq
 8000438:	2800      	cmpeq	r0, #0
 800043a:	bf1c      	itt	ne
 800043c:	f04f 31ff 	movne.w	r1, #4294967295
 8000440:	f04f 30ff 	movne.w	r0, #4294967295
 8000444:	f000 b974 	b.w	8000730 <__aeabi_idiv0>
 8000448:	f1ad 0c08 	sub.w	ip, sp, #8
 800044c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000450:	f000 f806 	bl	8000460 <__udivmoddi4>
 8000454:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800045c:	b004      	add	sp, #16
 800045e:	4770      	bx	lr

08000460 <__udivmoddi4>:
 8000460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000464:	9d08      	ldr	r5, [sp, #32]
 8000466:	4604      	mov	r4, r0
 8000468:	468e      	mov	lr, r1
 800046a:	2b00      	cmp	r3, #0
 800046c:	d14d      	bne.n	800050a <__udivmoddi4+0xaa>
 800046e:	428a      	cmp	r2, r1
 8000470:	4694      	mov	ip, r2
 8000472:	d969      	bls.n	8000548 <__udivmoddi4+0xe8>
 8000474:	fab2 f282 	clz	r2, r2
 8000478:	b152      	cbz	r2, 8000490 <__udivmoddi4+0x30>
 800047a:	fa01 f302 	lsl.w	r3, r1, r2
 800047e:	f1c2 0120 	rsb	r1, r2, #32
 8000482:	fa20 f101 	lsr.w	r1, r0, r1
 8000486:	fa0c fc02 	lsl.w	ip, ip, r2
 800048a:	ea41 0e03 	orr.w	lr, r1, r3
 800048e:	4094      	lsls	r4, r2
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	0c21      	lsrs	r1, r4, #16
 8000496:	fbbe f6f8 	udiv	r6, lr, r8
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fb08 e316 	mls	r3, r8, r6, lr
 80004a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80004a6:	fb06 f107 	mul.w	r1, r6, r7
 80004aa:	4299      	cmp	r1, r3
 80004ac:	d90a      	bls.n	80004c4 <__udivmoddi4+0x64>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80004b6:	f080 811f 	bcs.w	80006f8 <__udivmoddi4+0x298>
 80004ba:	4299      	cmp	r1, r3
 80004bc:	f240 811c 	bls.w	80006f8 <__udivmoddi4+0x298>
 80004c0:	3e02      	subs	r6, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	1a5b      	subs	r3, r3, r1
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3310 	mls	r3, r8, r0, r3
 80004d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d4:	fb00 f707 	mul.w	r7, r0, r7
 80004d8:	42a7      	cmp	r7, r4
 80004da:	d90a      	bls.n	80004f2 <__udivmoddi4+0x92>
 80004dc:	eb1c 0404 	adds.w	r4, ip, r4
 80004e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e4:	f080 810a 	bcs.w	80006fc <__udivmoddi4+0x29c>
 80004e8:	42a7      	cmp	r7, r4
 80004ea:	f240 8107 	bls.w	80006fc <__udivmoddi4+0x29c>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004f6:	1be4      	subs	r4, r4, r7
 80004f8:	2600      	movs	r6, #0
 80004fa:	b11d      	cbz	r5, 8000504 <__udivmoddi4+0xa4>
 80004fc:	40d4      	lsrs	r4, r2
 80004fe:	2300      	movs	r3, #0
 8000500:	e9c5 4300 	strd	r4, r3, [r5]
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	428b      	cmp	r3, r1
 800050c:	d909      	bls.n	8000522 <__udivmoddi4+0xc2>
 800050e:	2d00      	cmp	r5, #0
 8000510:	f000 80ef 	beq.w	80006f2 <__udivmoddi4+0x292>
 8000514:	2600      	movs	r6, #0
 8000516:	e9c5 0100 	strd	r0, r1, [r5]
 800051a:	4630      	mov	r0, r6
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	fab3 f683 	clz	r6, r3
 8000526:	2e00      	cmp	r6, #0
 8000528:	d14a      	bne.n	80005c0 <__udivmoddi4+0x160>
 800052a:	428b      	cmp	r3, r1
 800052c:	d302      	bcc.n	8000534 <__udivmoddi4+0xd4>
 800052e:	4282      	cmp	r2, r0
 8000530:	f200 80f9 	bhi.w	8000726 <__udivmoddi4+0x2c6>
 8000534:	1a84      	subs	r4, r0, r2
 8000536:	eb61 0303 	sbc.w	r3, r1, r3
 800053a:	2001      	movs	r0, #1
 800053c:	469e      	mov	lr, r3
 800053e:	2d00      	cmp	r5, #0
 8000540:	d0e0      	beq.n	8000504 <__udivmoddi4+0xa4>
 8000542:	e9c5 4e00 	strd	r4, lr, [r5]
 8000546:	e7dd      	b.n	8000504 <__udivmoddi4+0xa4>
 8000548:	b902      	cbnz	r2, 800054c <__udivmoddi4+0xec>
 800054a:	deff      	udf	#255	; 0xff
 800054c:	fab2 f282 	clz	r2, r2
 8000550:	2a00      	cmp	r2, #0
 8000552:	f040 8092 	bne.w	800067a <__udivmoddi4+0x21a>
 8000556:	eba1 010c 	sub.w	r1, r1, ip
 800055a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800055e:	fa1f fe8c 	uxth.w	lr, ip
 8000562:	2601      	movs	r6, #1
 8000564:	0c20      	lsrs	r0, r4, #16
 8000566:	fbb1 f3f7 	udiv	r3, r1, r7
 800056a:	fb07 1113 	mls	r1, r7, r3, r1
 800056e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000572:	fb0e f003 	mul.w	r0, lr, r3
 8000576:	4288      	cmp	r0, r1
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x12c>
 800057a:	eb1c 0101 	adds.w	r1, ip, r1
 800057e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0x12a>
 8000584:	4288      	cmp	r0, r1
 8000586:	f200 80cb 	bhi.w	8000720 <__udivmoddi4+0x2c0>
 800058a:	4643      	mov	r3, r8
 800058c:	1a09      	subs	r1, r1, r0
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb1 f0f7 	udiv	r0, r1, r7
 8000594:	fb07 1110 	mls	r1, r7, r0, r1
 8000598:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800059c:	fb0e fe00 	mul.w	lr, lr, r0
 80005a0:	45a6      	cmp	lr, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x156>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80005ac:	d202      	bcs.n	80005b4 <__udivmoddi4+0x154>
 80005ae:	45a6      	cmp	lr, r4
 80005b0:	f200 80bb 	bhi.w	800072a <__udivmoddi4+0x2ca>
 80005b4:	4608      	mov	r0, r1
 80005b6:	eba4 040e 	sub.w	r4, r4, lr
 80005ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005be:	e79c      	b.n	80004fa <__udivmoddi4+0x9a>
 80005c0:	f1c6 0720 	rsb	r7, r6, #32
 80005c4:	40b3      	lsls	r3, r6
 80005c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80005ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80005ce:	fa20 f407 	lsr.w	r4, r0, r7
 80005d2:	fa01 f306 	lsl.w	r3, r1, r6
 80005d6:	431c      	orrs	r4, r3
 80005d8:	40f9      	lsrs	r1, r7
 80005da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005de:	fa00 f306 	lsl.w	r3, r0, r6
 80005e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80005e6:	0c20      	lsrs	r0, r4, #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fb09 1118 	mls	r1, r9, r8, r1
 80005f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005f4:	fb08 f00e 	mul.w	r0, r8, lr
 80005f8:	4288      	cmp	r0, r1
 80005fa:	fa02 f206 	lsl.w	r2, r2, r6
 80005fe:	d90b      	bls.n	8000618 <__udivmoddi4+0x1b8>
 8000600:	eb1c 0101 	adds.w	r1, ip, r1
 8000604:	f108 3aff 	add.w	sl, r8, #4294967295
 8000608:	f080 8088 	bcs.w	800071c <__udivmoddi4+0x2bc>
 800060c:	4288      	cmp	r0, r1
 800060e:	f240 8085 	bls.w	800071c <__udivmoddi4+0x2bc>
 8000612:	f1a8 0802 	sub.w	r8, r8, #2
 8000616:	4461      	add	r1, ip
 8000618:	1a09      	subs	r1, r1, r0
 800061a:	b2a4      	uxth	r4, r4
 800061c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000620:	fb09 1110 	mls	r1, r9, r0, r1
 8000624:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000628:	fb00 fe0e 	mul.w	lr, r0, lr
 800062c:	458e      	cmp	lr, r1
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x1e2>
 8000630:	eb1c 0101 	adds.w	r1, ip, r1
 8000634:	f100 34ff 	add.w	r4, r0, #4294967295
 8000638:	d26c      	bcs.n	8000714 <__udivmoddi4+0x2b4>
 800063a:	458e      	cmp	lr, r1
 800063c:	d96a      	bls.n	8000714 <__udivmoddi4+0x2b4>
 800063e:	3802      	subs	r0, #2
 8000640:	4461      	add	r1, ip
 8000642:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000646:	fba0 9402 	umull	r9, r4, r0, r2
 800064a:	eba1 010e 	sub.w	r1, r1, lr
 800064e:	42a1      	cmp	r1, r4
 8000650:	46c8      	mov	r8, r9
 8000652:	46a6      	mov	lr, r4
 8000654:	d356      	bcc.n	8000704 <__udivmoddi4+0x2a4>
 8000656:	d053      	beq.n	8000700 <__udivmoddi4+0x2a0>
 8000658:	b15d      	cbz	r5, 8000672 <__udivmoddi4+0x212>
 800065a:	ebb3 0208 	subs.w	r2, r3, r8
 800065e:	eb61 010e 	sbc.w	r1, r1, lr
 8000662:	fa01 f707 	lsl.w	r7, r1, r7
 8000666:	fa22 f306 	lsr.w	r3, r2, r6
 800066a:	40f1      	lsrs	r1, r6
 800066c:	431f      	orrs	r7, r3
 800066e:	e9c5 7100 	strd	r7, r1, [r5]
 8000672:	2600      	movs	r6, #0
 8000674:	4631      	mov	r1, r6
 8000676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	40d8      	lsrs	r0, r3
 8000680:	fa0c fc02 	lsl.w	ip, ip, r2
 8000684:	fa21 f303 	lsr.w	r3, r1, r3
 8000688:	4091      	lsls	r1, r2
 800068a:	4301      	orrs	r1, r0
 800068c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000690:	fa1f fe8c 	uxth.w	lr, ip
 8000694:	fbb3 f0f7 	udiv	r0, r3, r7
 8000698:	fb07 3610 	mls	r6, r7, r0, r3
 800069c:	0c0b      	lsrs	r3, r1, #16
 800069e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80006a2:	fb00 f60e 	mul.w	r6, r0, lr
 80006a6:	429e      	cmp	r6, r3
 80006a8:	fa04 f402 	lsl.w	r4, r4, r2
 80006ac:	d908      	bls.n	80006c0 <__udivmoddi4+0x260>
 80006ae:	eb1c 0303 	adds.w	r3, ip, r3
 80006b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80006b6:	d22f      	bcs.n	8000718 <__udivmoddi4+0x2b8>
 80006b8:	429e      	cmp	r6, r3
 80006ba:	d92d      	bls.n	8000718 <__udivmoddi4+0x2b8>
 80006bc:	3802      	subs	r0, #2
 80006be:	4463      	add	r3, ip
 80006c0:	1b9b      	subs	r3, r3, r6
 80006c2:	b289      	uxth	r1, r1
 80006c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80006c8:	fb07 3316 	mls	r3, r7, r6, r3
 80006cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006d0:	fb06 f30e 	mul.w	r3, r6, lr
 80006d4:	428b      	cmp	r3, r1
 80006d6:	d908      	bls.n	80006ea <__udivmoddi4+0x28a>
 80006d8:	eb1c 0101 	adds.w	r1, ip, r1
 80006dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80006e0:	d216      	bcs.n	8000710 <__udivmoddi4+0x2b0>
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d914      	bls.n	8000710 <__udivmoddi4+0x2b0>
 80006e6:	3e02      	subs	r6, #2
 80006e8:	4461      	add	r1, ip
 80006ea:	1ac9      	subs	r1, r1, r3
 80006ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006f0:	e738      	b.n	8000564 <__udivmoddi4+0x104>
 80006f2:	462e      	mov	r6, r5
 80006f4:	4628      	mov	r0, r5
 80006f6:	e705      	b.n	8000504 <__udivmoddi4+0xa4>
 80006f8:	4606      	mov	r6, r0
 80006fa:	e6e3      	b.n	80004c4 <__udivmoddi4+0x64>
 80006fc:	4618      	mov	r0, r3
 80006fe:	e6f8      	b.n	80004f2 <__udivmoddi4+0x92>
 8000700:	454b      	cmp	r3, r9
 8000702:	d2a9      	bcs.n	8000658 <__udivmoddi4+0x1f8>
 8000704:	ebb9 0802 	subs.w	r8, r9, r2
 8000708:	eb64 0e0c 	sbc.w	lr, r4, ip
 800070c:	3801      	subs	r0, #1
 800070e:	e7a3      	b.n	8000658 <__udivmoddi4+0x1f8>
 8000710:	4646      	mov	r6, r8
 8000712:	e7ea      	b.n	80006ea <__udivmoddi4+0x28a>
 8000714:	4620      	mov	r0, r4
 8000716:	e794      	b.n	8000642 <__udivmoddi4+0x1e2>
 8000718:	4640      	mov	r0, r8
 800071a:	e7d1      	b.n	80006c0 <__udivmoddi4+0x260>
 800071c:	46d0      	mov	r8, sl
 800071e:	e77b      	b.n	8000618 <__udivmoddi4+0x1b8>
 8000720:	3b02      	subs	r3, #2
 8000722:	4461      	add	r1, ip
 8000724:	e732      	b.n	800058c <__udivmoddi4+0x12c>
 8000726:	4630      	mov	r0, r6
 8000728:	e709      	b.n	800053e <__udivmoddi4+0xde>
 800072a:	4464      	add	r4, ip
 800072c:	3802      	subs	r0, #2
 800072e:	e742      	b.n	80005b6 <__udivmoddi4+0x156>

08000730 <__aeabi_idiv0>:
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800073c:	1d39      	adds	r1, r7, #4
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	2201      	movs	r2, #1
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <__io_putchar+0x20>)
 8000746:	f002 fc44 	bl	8002fd2 <HAL_UART_Transmit>
  return ch;
 800074a:	687b      	ldr	r3, [r7, #4]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000330 	.word	0x20000330

08000758 <zeros>:
 * @param	Pointer to vector of type uint32_t
 * @param	Vector length
 * @retval	None
 * */
void zeros (uint32_t *vectorIn, uint32_t longitud)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	uint32_t i;

	if(NULL != vectorIn && longitud > 0)	/** check parameters*/
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d012      	beq.n	800078e <zeros+0x36>
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d00f      	beq.n	800078e <zeros+0x36>
		for(i=0;i<longitud;i++)		/** alternative option: memset(&vectorIn,0,longitud) */
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	e007      	b.n	8000784 <zeros+0x2c>
			*vectorIn++ = 0;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	1d1a      	adds	r2, r3, #4
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
		for(i=0;i<longitud;i++)		/** alternative option: memset(&vectorIn,0,longitud) */
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	3301      	adds	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fa      	ldr	r2, [r7, #12]
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	429a      	cmp	r2, r3
 800078a:	d3f3      	bcc.n	8000774 <zeros+0x1c>
	if(NULL != vectorIn && longitud > 0)	/** check parameters*/
 800078c:	e002      	b.n	8000794 <zeros+0x3c>
	else
		Error_Handler();
 800078e:	f000 fd17 	bl	80011c0 <Error_Handler>
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <productoEscalar32>:
 * @param	Vector length
 * @param	Scalar value
 * @retval	None
 * */
void productoEscalar32 (uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	603b      	str	r3, [r7, #0]
	uint32_t i;

	if(NULL != vectorIn && vectorOut != NULL && longitud > 0)/** check parameters*/
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d026      	beq.n	80007fe <productoEscalar32+0x62>
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d023      	beq.n	80007fe <productoEscalar32+0x62>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d020      	beq.n	80007fe <productoEscalar32+0x62>
	{
		if(escalar != 0)
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d015      	beq.n	80007ee <productoEscalar32+0x52>
			for(i=0;i<longitud;i++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e00d      	b.n	80007e4 <productoEscalar32+0x48>
				*vectorOut++ = *vectorIn++ * escalar;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	1d1a      	adds	r2, r3, #4
 80007cc:	60fa      	str	r2, [r7, #12]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	1d19      	adds	r1, r3, #4
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	6839      	ldr	r1, [r7, #0]
 80007d8:	fb01 f202 	mul.w	r2, r1, r2
 80007dc:	601a      	str	r2, [r3, #0]
			for(i=0;i<longitud;i++)
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3301      	adds	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d3ed      	bcc.n	80007c8 <productoEscalar32+0x2c>
		if(escalar != 0)
 80007ec:	e00a      	b.n	8000804 <productoEscalar32+0x68>
		else
			memset(&vectorOut,0,longitud);
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 fa8c 	bl	8003d14 <memset>
		if(escalar != 0)
 80007fc:	e002      	b.n	8000804 <productoEscalar32+0x68>
	}
	else
		Error_Handler();
 80007fe:	f000 fcdf 	bl	80011c0 <Error_Handler>
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <productoEscalar16>:
 * @param	Vector length
 * @param	Scalar value
 * @retval	None
 * */
void productoEscalar16 (uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitud, uint16_t escalar)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	807b      	strh	r3, [r7, #2]
	uint32_t i;

		if(NULL != vectorIn && vectorOut != NULL && longitud > 0)/** check parameters*/
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d027      	beq.n	8000870 <productoEscalar16+0x64>
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d024      	beq.n	8000870 <productoEscalar16+0x64>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d021      	beq.n	8000870 <productoEscalar16+0x64>
		{
			if(escalar != 0)
 800082c:	887b      	ldrh	r3, [r7, #2]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d016      	beq.n	8000860 <productoEscalar16+0x54>
				for(i=0;i<longitud;i++)
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	e00e      	b.n	8000856 <productoEscalar16+0x4a>
					*vectorOut++ = *vectorIn++ * escalar;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	1c9a      	adds	r2, r3, #2
 800083c:	60fa      	str	r2, [r7, #12]
 800083e:	881a      	ldrh	r2, [r3, #0]
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	1c99      	adds	r1, r3, #2
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	8879      	ldrh	r1, [r7, #2]
 8000848:	fb11 f202 	smulbb	r2, r1, r2
 800084c:	b292      	uxth	r2, r2
 800084e:	801a      	strh	r2, [r3, #0]
				for(i=0;i<longitud;i++)
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	3301      	adds	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	429a      	cmp	r2, r3
 800085c:	d3ec      	bcc.n	8000838 <productoEscalar16+0x2c>
			if(escalar != 0)
 800085e:	e00a      	b.n	8000876 <productoEscalar16+0x6a>
			else
				memset(&vectorOut,0,longitud);
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f003 fa53 	bl	8003d14 <memset>
			if(escalar != 0)
 800086e:	e002      	b.n	8000876 <productoEscalar16+0x6a>
		}
		else
			Error_Handler();
 8000870:	f000 fca6 	bl	80011c0 <Error_Handler>

}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <productoEscalar12>:
 * @param	Vector length
 * @param	Scalar value
 * @retval	None
 * */
void productoEscalar12 (uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitud, uint16_t escalar)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	807b      	strh	r3, [r7, #2]
	uint32_t i;

		if(NULL != vectorIn && vectorOut != NULL && longitud > 0)/** check parameters*/
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d033      	beq.n	80008fa <productoEscalar12+0x7c>
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d030      	beq.n	80008fa <productoEscalar12+0x7c>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d02d      	beq.n	80008fa <productoEscalar12+0x7c>
		{
			if(escalar != 0)
 800089e:	887b      	ldrh	r3, [r7, #2]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d022      	beq.n	80008ea <productoEscalar12+0x6c>
				for(i=0;i<longitud;i++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	e01a      	b.n	80008e0 <productoEscalar12+0x62>
				{
					*vectorOut++ = *vectorIn++ * escalar;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	1c9a      	adds	r2, r3, #2
 80008ae:	60fa      	str	r2, [r7, #12]
 80008b0:	881a      	ldrh	r2, [r3, #0]
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	1c99      	adds	r1, r3, #2
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	8879      	ldrh	r1, [r7, #2]
 80008ba:	fb11 f202 	smulbb	r2, r1, r2
 80008be:	b292      	uxth	r2, r2
 80008c0:	801a      	strh	r2, [r3, #0]
					if((*(vectorOut-1) >>SHIFT_12BITS)>0)
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	3b02      	subs	r3, #2
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	0b1b      	lsrs	r3, r3, #12
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d004      	beq.n	80008da <productoEscalar12+0x5c>
						*(vectorOut-1) = MAX_VALUE_12BITS;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	3b02      	subs	r3, #2
 80008d4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80008d8:	801a      	strh	r2, [r3, #0]
				for(i=0;i<longitud;i++)
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	3301      	adds	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d3e0      	bcc.n	80008aa <productoEscalar12+0x2c>
			if(escalar != 0)
 80008e8:	e00a      	b.n	8000900 <productoEscalar12+0x82>
//					vectorIn++;
//					vectorOut++;
				}
			else
				memset(&vectorOut,0,longitud);
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 fa0e 	bl	8003d14 <memset>
			if(escalar != 0)
 80008f8:	e002      	b.n	8000900 <productoEscalar12+0x82>
		}
		else
			Error_Handler();
 80008fa:	f000 fc61 	bl	80011c0 <Error_Handler>
}
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <filtroVentana10>:
 * @param	Vector length
 * @param	Scalar value
 * @retval	None
 * */
void filtroVentana10(uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitud)
{
 8000908:	b480      	push	{r7}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
	uint32_t piv,shift;
	uint16_t sum,samples;
	int32_t index;

	if(NULL != vectorIn && vectorOut != NULL && longitud> 0)/** check parameters*/
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d04a      	beq.n	80009b0 <filtroVentana10+0xa8>
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d047      	beq.n	80009b0 <filtroVentana10+0xa8>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d044      	beq.n	80009b0 <filtroVentana10+0xa8>
	{
		for(piv=0;piv<longitud;piv++)
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
 800092a:	e03d      	b.n	80009a8 <filtroVentana10+0xa0>
		{
			samples = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	82bb      	strh	r3, [r7, #20]
			sum = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	82fb      	strh	r3, [r7, #22]

			for(shift=1;shift<=SIZE_WINDOW/2;shift++)
 8000934:	2301      	movs	r3, #1
 8000936:	61bb      	str	r3, [r7, #24]
 8000938:	e027      	b.n	800098a <filtroVentana10+0x82>
			{
				if((index=piv-shift)>=0)
 800093a:	69fa      	ldr	r2, [r7, #28]
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	2b00      	cmp	r3, #0
 8000946:	db0a      	blt.n	800095e <filtroVentana10+0x56>
				{
					sum += *(vectorIn+index);
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	4413      	add	r3, r2
 8000950:	881a      	ldrh	r2, [r3, #0]
 8000952:	8afb      	ldrh	r3, [r7, #22]
 8000954:	4413      	add	r3, r2
 8000956:	82fb      	strh	r3, [r7, #22]
					samples++;
 8000958:	8abb      	ldrh	r3, [r7, #20]
 800095a:	3301      	adds	r3, #1
 800095c:	82bb      	strh	r3, [r7, #20]
				}
				if((index=piv+shift)<longitud)
 800095e:	69fa      	ldr	r2, [r7, #28]
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	4413      	add	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	429a      	cmp	r2, r3
 800096c:	d90a      	bls.n	8000984 <filtroVentana10+0x7c>
				{
					sum += *(vectorIn+index);
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	4413      	add	r3, r2
 8000976:	881a      	ldrh	r2, [r3, #0]
 8000978:	8afb      	ldrh	r3, [r7, #22]
 800097a:	4413      	add	r3, r2
 800097c:	82fb      	strh	r3, [r7, #22]
					samples++;
 800097e:	8abb      	ldrh	r3, [r7, #20]
 8000980:	3301      	adds	r3, #1
 8000982:	82bb      	strh	r3, [r7, #20]
			for(shift=1;shift<=SIZE_WINDOW/2;shift++)
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	3301      	adds	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	2b05      	cmp	r3, #5
 800098e:	d9d4      	bls.n	800093a <filtroVentana10+0x32>
				}
			}
			*vectorOut++ = sum/samples;
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	1c9a      	adds	r2, r3, #2
 8000994:	60ba      	str	r2, [r7, #8]
 8000996:	8af9      	ldrh	r1, [r7, #22]
 8000998:	8aba      	ldrh	r2, [r7, #20]
 800099a:	fbb1 f2f2 	udiv	r2, r1, r2
 800099e:	b292      	uxth	r2, r2
 80009a0:	801a      	strh	r2, [r3, #0]
		for(piv=0;piv<longitud;piv++)
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3301      	adds	r3, #1
 80009a6:	61fb      	str	r3, [r7, #28]
 80009a8:	69fa      	ldr	r2, [r7, #28]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d3bd      	bcc.n	800092c <filtroVentana10+0x24>
		}
	}
}
 80009b0:	bf00      	nop
 80009b2:	3724      	adds	r7, #36	; 0x24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <pack32to16>:
 * @param	Pointer to output vector of type uint16_t
 * @param	Vector length
 * @retval	None
 * */
void pack32to16 (int32_t * vectorIn, int16_t *vectorOut, uint32_t longitud)
{
 80009bc:	b480      	push	{r7}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
	uint32_t i;

	if(NULL != vectorIn && vectorOut != NULL && longitud > 0)/** check parameters*/
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d019      	beq.n	8000a02 <pack32to16+0x46>
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d016      	beq.n	8000a02 <pack32to16+0x46>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d013      	beq.n	8000a02 <pack32to16+0x46>
		for(i = 0; i < longitud; i++)
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	e00c      	b.n	80009fa <pack32to16+0x3e>
			*(vectorOut++) = (int16_t)((*(vectorIn++))>>16);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	1d1a      	adds	r2, r3, #4
 80009e4:	60fa      	str	r2, [r7, #12]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	1419      	asrs	r1, r3, #16
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1c9a      	adds	r2, r3, #2
 80009ee:	60ba      	str	r2, [r7, #8]
 80009f0:	b20a      	sxth	r2, r1
 80009f2:	801a      	strh	r2, [r3, #0]
		for(i = 0; i < longitud; i++)
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3301      	adds	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d3ee      	bcc.n	80009e0 <pack32to16+0x24>
}
 8000a02:	bf00      	nop
 8000a04:	371c      	adds	r7, #28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <max>:
 * @param	Pointer to input vector of type int32_t
 * @param	Vector length
 * @retval	index of max.value
 * */
int32_t max (int32_t * vectorIn, uint32_t longitud)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b087      	sub	sp, #28
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint32_t index = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
	int32_t  maxValue = *vectorIn;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]

	if(NULL != vectorIn && longitud > 0)/** check parameters*/
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d01c      	beq.n	8000a62 <max+0x54>
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d019      	beq.n	8000a62 <max+0x54>
	{
		for(i = 1; i < longitud; i++)
 8000a2e:	2301      	movs	r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	e012      	b.n	8000a5a <max+0x4c>
		{
			if(*(vectorIn+i)>maxValue)
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	da07      	bge.n	8000a54 <max+0x46>
			{
				maxValue = *(vectorIn+i);
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	60fb      	str	r3, [r7, #12]
				index = i;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	613b      	str	r3, [r7, #16]
		for(i = 1; i < longitud; i++)
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	3301      	adds	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	697a      	ldr	r2, [r7, #20]
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d3e8      	bcc.n	8000a34 <max+0x26>
			}
		}
	}
	return index;
 8000a62:	693b      	ldr	r3, [r7, #16]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	371c      	adds	r7, #28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <downsampleM>:
 * @param	Pointer to output vector of type uint16_t
 * @param	Vector length
 * @retval	None
 * */
void downsampleM (int32_t * vectorIn, int32_t * vectorOut, uint32_t longitud, uint32_t N)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
	uint32_t i;

	if(NULL != vectorIn && vectorOut != NULL && longitud > 0 && N != 0)/** check parameters*/
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d026      	beq.n	8000ad2 <downsampleM+0x62>
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d023      	beq.n	8000ad2 <downsampleM+0x62>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d020      	beq.n	8000ad2 <downsampleM+0x62>
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d01d      	beq.n	8000ad2 <downsampleM+0x62>
	{
		for(i=0; i<longitud; i++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	e016      	b.n	8000aca <downsampleM+0x5a>
		{
			if((i+1) % N != 0)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000aa6:	6839      	ldr	r1, [r7, #0]
 8000aa8:	fb01 f202 	mul.w	r2, r1, r2
 8000aac:	1a9b      	subs	r3, r3, r2
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d005      	beq.n	8000abe <downsampleM+0x4e>
				*vectorOut++ = *vectorIn;
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	1d1a      	adds	r2, r3, #4
 8000ab6:	60ba      	str	r2, [r7, #8]
 8000ab8:	68fa      	ldr	r2, [r7, #12]
 8000aba:	6812      	ldr	r2, [r2, #0]
 8000abc:	601a      	str	r2, [r3, #0]
			vectorIn++;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	60fb      	str	r3, [r7, #12]
		for(i=0; i<longitud; i++)
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d3e4      	bcc.n	8000a9c <downsampleM+0x2c>
		}
	}
}
 8000ad2:	bf00      	nop
 8000ad4:	371c      	adds	r7, #28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <invertir>:
 * @param	Pointer to input vector of type uint16_t
 * @param	Vector length
 * @retval	None
 * */
void invertir (uint16_t * vector, uint32_t longitud)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint32_t temp;
	longitud--;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	603b      	str	r3, [r7, #0]

	if(NULL != vector && longitud > 0)/** check parameters*/
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d028      	beq.n	8000b46 <invertir+0x68>
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d025      	beq.n	8000b46 <invertir+0x68>
	{
		for (i=0; i<longitud/2; i++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	e01d      	b.n	8000b3c <invertir+0x5e>
		{
			temp = *(vector+i);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	4413      	add	r3, r2
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	60bb      	str	r3, [r7, #8]
			*(vector+i) = *(vector+longitud-i);
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	441a      	add	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	6879      	ldr	r1, [r7, #4]
 8000b1e:	440b      	add	r3, r1
 8000b20:	8812      	ldrh	r2, [r2, #0]
 8000b22:	801a      	strh	r2, [r3, #0]
			*(vector+longitud-i) = temp;
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	4413      	add	r3, r2
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	b292      	uxth	r2, r2
 8000b34:	801a      	strh	r2, [r3, #0]
		for (i=0; i<longitud/2; i++)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	085b      	lsrs	r3, r3, #1
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d3dc      	bcc.n	8000b00 <invertir+0x22>
		}
	}
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <corr>:
 * @param	Pointer to input vector of type uint16_t
 * @param	Vector length
 * @retval	None
 * */
void corr (int16_t * vectorXn, int16_t * vectorYn, int16_t * vectorCorr, uint32_t longitud)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b08b      	sub	sp, #44	; 0x2c
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	603b      	str	r3, [r7, #0]
	int32_t indexX,indexY;
	int16_t sumXnYn;
	int32_t delay;
	int32_t delayMax = -longitud+1;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	f1c3 0301 	rsb	r3, r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]

	if(NULL != vectorXn && vectorYn != NULL && vectorCorr != NULL && longitud > 0)/** check parameters*/
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d043      	beq.n	8000bf6 <corr+0xa4>
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d040      	beq.n	8000bf6 <corr+0xa4>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d03d      	beq.n	8000bf6 <corr+0xa4>
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d03a      	beq.n	8000bf6 <corr+0xa4>
	{

		for(delay=delayMax; delay<(int32_t)longitud; delay++)
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	61fb      	str	r3, [r7, #28]
 8000b84:	e033      	b.n	8000bee <corr+0x9c>
		{
			sumXnYn = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	847b      	strh	r3, [r7, #34]	; 0x22

			for (indexX=0; indexX<longitud; indexX++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b8e:	e022      	b.n	8000bd6 <corr+0x84>
			{
				indexY = indexX + delay;
 8000b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	4413      	add	r3, r2
 8000b96:	617b      	str	r3, [r7, #20]
				if(indexY >= 0 && indexY < longitud)
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db18      	blt.n	8000bd0 <corr+0x7e>
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d914      	bls.n	8000bd0 <corr+0x7e>
					sumXnYn += (*(vectorXn+indexY))*(*(vectorYn+indexX));
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	4413      	add	r3, r2
 8000bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	440b      	add	r3, r1
 8000bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	fb12 f303 	smulbb	r3, r2, r3
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000bca:	4413      	add	r3, r2
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	847b      	strh	r3, [r7, #34]	; 0x22
			for (indexX=0; indexX<longitud; indexX++)
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	683a      	ldr	r2, [r7, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d8d8      	bhi.n	8000b90 <corr+0x3e>
			}

			*(vectorCorr++) = sumXnYn;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	1c9a      	adds	r2, r3, #2
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000be6:	801a      	strh	r2, [r3, #0]
		for(delay=delayMax; delay<(int32_t)longitud; delay++)
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	3301      	adds	r3, #1
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	69fa      	ldr	r2, [r7, #28]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	dbc7      	blt.n	8000b86 <corr+0x34>
		}
	}
}
 8000bf6:	bf00      	nop
 8000bf8:	372c      	adds	r7, #44	; 0x2c
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b088      	sub	sp, #32
 8000c06:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000c08:	f3ef 8314 	mrs	r3, CONTROL
 8000c0c:	607b      	str	r3, [r7, #4]
  return(result);
 8000c0e:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 8000c10:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	61fb      	str	r3, [r7, #28]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	f383 8814 	msr	CONTROL, r3
}
 8000c24:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000c26:	f3ef 8314 	mrs	r3, CONTROL
 8000c2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 8000c2e:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f023 0301 	bic.w	r3, r3, #1
 8000c36:	61fb      	str	r3, [r7, #28]
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	f383 8814 	msr	CONTROL, r3
}
 8000c42:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000c44:	f3ef 8314 	mrs	r3, CONTROL
 8000c48:	617b      	str	r3, [r7, #20]
  return(result);
 8000c4a:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 8000c4c:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 8000c4e:	f7ff facf 	bl	80001f0 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000c52:	f3ef 8314 	mrs	r3, CONTROL
 8000c56:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c58:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 8000c5a:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 8000c5c:	bf00      	nop
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	; 0x38
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t pData[20];
	memset(&pData,0,sizeof(pData));
 8000c6a:	f107 0318 	add.w	r3, r7, #24
 8000c6e:	2214      	movs	r2, #20
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 f84e 	bl	8003d14 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c78:	f000 fd54 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c7c:	f000 f8e2 	bl	8000e44 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  // Activa contador de ciclos (iniciar una sola vez)
  DWT->CTRL |= 1 << DWT_CTRL_CYCCNTENA_Pos;
 8000c80:	4b60      	ldr	r3, [pc, #384]	; (8000e04 <main+0x1a0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a5f      	ldr	r2, [pc, #380]	; (8000e04 <main+0x1a0>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8c:	f000 f9ea 	bl	8001064 <MX_GPIO_Init>
  MX_ETH_Init();
 8000c90:	f000 f942 	bl	8000f18 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000c94:	f000 f98e 	bl	8000fb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c98:	f000 f9b6 	bl	8001008 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 8000c9c:	f7ff ffb1 	bl	8000c02 <PrivilegiosSVC>

  const uint32_t Resultado = asm_sum (5, 3);
 8000ca0:	2103      	movs	r1, #3
 8000ca2:	2005      	movs	r0, #5
 8000ca4:	f7ff faa6 	bl	80001f4 <asm_sum>
 8000ca8:	6378      	str	r0, [r7, #52]	; 0x34

  /* Test de ejercicio 1 */
  zeros (&u32vectorIn[0], sizeof(u32vectorIn)/sizeof(u32vectorIn[0]));
 8000caa:	210a      	movs	r1, #10
 8000cac:	4856      	ldr	r0, [pc, #344]	; (8000e08 <main+0x1a4>)
 8000cae:	f7ff fd53 	bl	8000758 <zeros>
  asm_zeros(&u32vectorIn[0], sizeof(u32vectorIn)/sizeof(u32vectorIn[0]));
 8000cb2:	210a      	movs	r1, #10
 8000cb4:	4854      	ldr	r0, [pc, #336]	; (8000e08 <main+0x1a4>)
 8000cb6:	f7ff fa9f 	bl	80001f8 <asm_zeros>

  /* Test de ejecicio 2 */
  productoEscalar32 (&u32vectorIn[0], &u32vectorOut[0], sizeof(u32vectorIn)/sizeof(u32vectorIn[0]), ESCALAR);
 8000cba:	2319      	movs	r3, #25
 8000cbc:	220a      	movs	r2, #10
 8000cbe:	4953      	ldr	r1, [pc, #332]	; (8000e0c <main+0x1a8>)
 8000cc0:	4851      	ldr	r0, [pc, #324]	; (8000e08 <main+0x1a4>)
 8000cc2:	f7ff fd6b 	bl	800079c <productoEscalar32>
  asm_productoEscalar32 (&u32vectorIn[0], &u32vectorOut[0],sizeof(u32vectorIn)/sizeof(u32vectorIn[0]), ESCALAR);
 8000cc6:	2319      	movs	r3, #25
 8000cc8:	220a      	movs	r2, #10
 8000cca:	4950      	ldr	r1, [pc, #320]	; (8000e0c <main+0x1a8>)
 8000ccc:	484e      	ldr	r0, [pc, #312]	; (8000e08 <main+0x1a4>)
 8000cce:	f7ff fa9b 	bl	8000208 <asm_productoEscalar32>

  /* Test de ejecicio 3 */
  productoEscalar16 (&u16vectorIn[0], &u16vectorOut[0], sizeof(u16vectorIn)/sizeof(u16vectorIn[0]), ESCALAR);
 8000cd2:	2319      	movs	r3, #25
 8000cd4:	220a      	movs	r2, #10
 8000cd6:	494e      	ldr	r1, [pc, #312]	; (8000e10 <main+0x1ac>)
 8000cd8:	484e      	ldr	r0, [pc, #312]	; (8000e14 <main+0x1b0>)
 8000cda:	f7ff fd97 	bl	800080c <productoEscalar16>
  asm_productoEscalar16 (&u16vectorIn[0], &u16vectorOut[0], sizeof(u16vectorIn)/sizeof(u16vectorIn[0]), ESCALAR);
 8000cde:	2319      	movs	r3, #25
 8000ce0:	220a      	movs	r2, #10
 8000ce2:	494b      	ldr	r1, [pc, #300]	; (8000e10 <main+0x1ac>)
 8000ce4:	484b      	ldr	r0, [pc, #300]	; (8000e14 <main+0x1b0>)
 8000ce6:	f7ff fa9a 	bl	800021e <asm_productoEscalar16>

  /* Test de ejecicio 4 */
  DWT->CYCCNT = 0;
 8000cea:	4b46      	ldr	r3, [pc, #280]	; (8000e04 <main+0x1a0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
  productoEscalar12 (&u16vectorIn[0], &u16vectorOut[0], sizeof(u16vectorIn)/sizeof(u16vectorIn[0]), ESCALAR);
 8000cf0:	2319      	movs	r3, #25
 8000cf2:	220a      	movs	r2, #10
 8000cf4:	4946      	ldr	r1, [pc, #280]	; (8000e10 <main+0x1ac>)
 8000cf6:	4847      	ldr	r0, [pc, #284]	; (8000e14 <main+0x1b0>)
 8000cf8:	f7ff fdc1 	bl	800087e <productoEscalar12>
  const volatile uint32_t ciclos_ex4c = DWT->CYCCNT;
 8000cfc:	4b41      	ldr	r3, [pc, #260]	; (8000e04 <main+0x1a0>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	617b      	str	r3, [r7, #20]

  DWT->CYCCNT = 0;
 8000d02:	4b40      	ldr	r3, [pc, #256]	; (8000e04 <main+0x1a0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
  asm_productoEscalar12 (&u16vectorIn[0], &u16vectorOut[0], sizeof(u16vectorIn)/sizeof(u16vectorIn[0]), ESCALAR);
 8000d08:	2319      	movs	r3, #25
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	4940      	ldr	r1, [pc, #256]	; (8000e10 <main+0x1ac>)
 8000d0e:	4841      	ldr	r0, [pc, #260]	; (8000e14 <main+0x1b0>)
 8000d10:	f7ff fa90 	bl	8000234 <asm_productoEscalar12>
  const volatile uint32_t ciclos_ex4asm = DWT->CYCCNT;
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <main+0x1a0>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	613b      	str	r3, [r7, #16]

  /* Test de ejecicio 5 */
  DWT->CYCCNT = 0;
 8000d1a:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <main+0x1a0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  filtroVentana10(&u16vectorIn[0], &u16vectorOut[0], sizeof(u16vectorIn)/sizeof(u16vectorIn[0]));
 8000d20:	220a      	movs	r2, #10
 8000d22:	493b      	ldr	r1, [pc, #236]	; (8000e10 <main+0x1ac>)
 8000d24:	483b      	ldr	r0, [pc, #236]	; (8000e14 <main+0x1b0>)
 8000d26:	f7ff fdef 	bl	8000908 <filtroVentana10>
  const volatile uint32_t ciclos_ex5c = DWT->CYCCNT;
 8000d2a:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <main+0x1a0>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	60fb      	str	r3, [r7, #12]

  DWT->CYCCNT = 0;
 8000d30:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <main+0x1a0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  asm_filtroVentana10(&u16vectorIn[0], &u16vectorOut[0], sizeof(u16vectorIn)/sizeof(u16vectorIn[0]));
 8000d36:	220a      	movs	r2, #10
 8000d38:	4935      	ldr	r1, [pc, #212]	; (8000e10 <main+0x1ac>)
 8000d3a:	4836      	ldr	r0, [pc, #216]	; (8000e14 <main+0x1b0>)
 8000d3c:	f7ff fa87 	bl	800024e <asm_filtroVentana10>
  const volatile uint32_t ciclos_ex5asm = DWT->CYCCNT;
 8000d40:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <main+0x1a0>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	60bb      	str	r3, [r7, #8]

  /* Test de ejecicio 6 */
  pack32to16(&s32vectorIn[0], &s16vectorOut[0], sizeof(s32vectorIn)/sizeof(s32vectorIn[0]));
 8000d46:	220a      	movs	r2, #10
 8000d48:	4933      	ldr	r1, [pc, #204]	; (8000e18 <main+0x1b4>)
 8000d4a:	4834      	ldr	r0, [pc, #208]	; (8000e1c <main+0x1b8>)
 8000d4c:	f7ff fe36 	bl	80009bc <pack32to16>
  asm_pack32to16(&s32vectorIn[0], &s16vectorOut[0], sizeof(s32vectorIn)/sizeof(s32vectorIn[0]));
 8000d50:	220a      	movs	r2, #10
 8000d52:	4931      	ldr	r1, [pc, #196]	; (8000e18 <main+0x1b4>)
 8000d54:	4831      	ldr	r0, [pc, #196]	; (8000e1c <main+0x1b8>)
 8000d56:	f7ff faa1 	bl	800029c <asm_pack32to16>

  /* Test de ejecicio 7 */
  int32_t indexMaxValueASM =  asm_max(&s32vectorIn[0], sizeof(s32vectorIn)/sizeof(s32vectorIn[0]));
 8000d5a:	210a      	movs	r1, #10
 8000d5c:	482f      	ldr	r0, [pc, #188]	; (8000e1c <main+0x1b8>)
 8000d5e:	f7ff faa9 	bl	80002b4 <asm_max>
 8000d62:	6338      	str	r0, [r7, #48]	; 0x30
  int32_t indexMaxValue = max(&s32vectorIn[0], sizeof(s32vectorIn)/sizeof(s32vectorIn[0]));
 8000d64:	210a      	movs	r1, #10
 8000d66:	482d      	ldr	r0, [pc, #180]	; (8000e1c <main+0x1b8>)
 8000d68:	f7ff fe51 	bl	8000a0e <max>
 8000d6c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Test de ejecicio 8 */
  asm_downsampleM (&s32vectorIn[0], &s32vectorOut[0], sizeof(s32vectorIn)/sizeof(s32vectorIn[0]), NUM_SAMPLES_DISCARD);
 8000d6e:	2303      	movs	r3, #3
 8000d70:	220a      	movs	r2, #10
 8000d72:	492b      	ldr	r1, [pc, #172]	; (8000e20 <main+0x1bc>)
 8000d74:	4829      	ldr	r0, [pc, #164]	; (8000e1c <main+0x1b8>)
 8000d76:	f7ff fab1 	bl	80002dc <asm_downsampleM>
  downsampleM (&s32vectorIn[0], &s32vectorOut[0], sizeof(s32vectorIn)/sizeof(s32vectorIn[0]), NUM_SAMPLES_DISCARD);
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	220a      	movs	r2, #10
 8000d7e:	4928      	ldr	r1, [pc, #160]	; (8000e20 <main+0x1bc>)
 8000d80:	4826      	ldr	r0, [pc, #152]	; (8000e1c <main+0x1b8>)
 8000d82:	f7ff fe75 	bl	8000a70 <downsampleM>

  /* Test de ejecicio 9 */
  asm_invertir (&u16vectorIn[0], sizeof(u16vectorIn)/sizeof(u16vectorIn[0]));
 8000d86:	210a      	movs	r1, #10
 8000d88:	4822      	ldr	r0, [pc, #136]	; (8000e14 <main+0x1b0>)
 8000d8a:	f7ff fab7 	bl	80002fc <asm_invertir>
  invertir (&u16vectorIn[0], sizeof(u16vectorIn)/sizeof(u16vectorIn[0]));
 8000d8e:	210a      	movs	r1, #10
 8000d90:	4820      	ldr	r0, [pc, #128]	; (8000e14 <main+0x1b0>)
 8000d92:	f7ff fea4 	bl	8000ade <invertir>

  /* Test de ejercicio 11*/
  DWT->CYCCNT = 0;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <main+0x1a0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	605a      	str	r2, [r3, #4]
  corr (&x_n[0],&y_n[0], &vectorCorr[0], sizeof(x_n)/sizeof(x_n[0]));
 8000d9c:	2305      	movs	r3, #5
 8000d9e:	4a21      	ldr	r2, [pc, #132]	; (8000e24 <main+0x1c0>)
 8000da0:	4921      	ldr	r1, [pc, #132]	; (8000e28 <main+0x1c4>)
 8000da2:	4822      	ldr	r0, [pc, #136]	; (8000e2c <main+0x1c8>)
 8000da4:	f7ff fed5 	bl	8000b52 <corr>
  const volatile uint32_t ciclos_ex11c = DWT->CYCCNT;
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <main+0x1a0>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	607b      	str	r3, [r7, #4]

  DWT->CYCCNT = 0;
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <main+0x1a0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	605a      	str	r2, [r3, #4]
  asm_corr (&x_n[0],&y_n[0], &vectorCorr[0], sizeof(x_n)/sizeof(x_n[0]));
 8000db4:	2305      	movs	r3, #5
 8000db6:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <main+0x1c0>)
 8000db8:	491b      	ldr	r1, [pc, #108]	; (8000e28 <main+0x1c4>)
 8000dba:	481c      	ldr	r0, [pc, #112]	; (8000e2c <main+0x1c8>)
 8000dbc:	f7ff fab9 	bl	8000332 <asm_corr>
  const volatile uint32_t ciclos_ex11asm = DWT->CYCCNT;
 8000dc0:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <main+0x1a0>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	603b      	str	r3, [r7, #0]

  printf("Ex4 C:%lu\r\n",ciclos_ex4c);
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4819      	ldr	r0, [pc, #100]	; (8000e30 <main+0x1cc>)
 8000dcc:	f002 ffaa 	bl	8003d24 <iprintf>
  printf("Ex4 ASM:%lu\r\n",ciclos_ex4asm);
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4817      	ldr	r0, [pc, #92]	; (8000e34 <main+0x1d0>)
 8000dd6:	f002 ffa5 	bl	8003d24 <iprintf>
  printf("Ex5 C:%lu\r\n",ciclos_ex5c);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4816      	ldr	r0, [pc, #88]	; (8000e38 <main+0x1d4>)
 8000de0:	f002 ffa0 	bl	8003d24 <iprintf>
  printf("Ex5 ASM:%lu\r\n",ciclos_ex5asm);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4619      	mov	r1, r3
 8000de8:	4814      	ldr	r0, [pc, #80]	; (8000e3c <main+0x1d8>)
 8000dea:	f002 ff9b 	bl	8003d24 <iprintf>
  printf("Ex11 C:%lu\r\n",ciclos_ex11c);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4619      	mov	r1, r3
 8000df2:	4813      	ldr	r0, [pc, #76]	; (8000e40 <main+0x1dc>)
 8000df4:	f002 ff96 	bl	8003d24 <iprintf>
  printf("Ex11 C:%lu\r\n",ciclos_ex11asm);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4810      	ldr	r0, [pc, #64]	; (8000e40 <main+0x1dc>)
 8000dfe:	f002 ff91 	bl	8003d24 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <main+0x19e>
 8000e04:	e0001000 	.word	0xe0001000
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000880 	.word	0x20000880
 8000e10:	200008a8 	.word	0x200008a8
 8000e14:	20000028 	.word	0x20000028
 8000e18:	200008e4 	.word	0x200008e4
 8000e1c:	2000003c 	.word	0x2000003c
 8000e20:	200008bc 	.word	0x200008bc
 8000e24:	200008f8 	.word	0x200008f8
 8000e28:	20000070 	.word	0x20000070
 8000e2c:	20000064 	.word	0x20000064
 8000e30:	08004c58 	.word	0x08004c58
 8000e34:	08004c64 	.word	0x08004c64
 8000e38:	08004c74 	.word	0x08004c74
 8000e3c:	08004c80 	.word	0x08004c80
 8000e40:	08004c90 	.word	0x08004c90

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b094      	sub	sp, #80	; 0x50
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 0320 	add.w	r3, r7, #32
 8000e4e:	2230      	movs	r2, #48	; 0x30
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 ff5e 	bl	8003d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <SystemClock_Config+0xcc>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <SystemClock_Config+0xcc>)
 8000e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e76:	6413      	str	r3, [r2, #64]	; 0x40
 8000e78:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <SystemClock_Config+0xcc>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <SystemClock_Config+0xd0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a21      	ldr	r2, [pc, #132]	; (8000f14 <SystemClock_Config+0xd0>)
 8000e8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <SystemClock_Config+0xd0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ea4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000eb8:	23a8      	movs	r3, #168	; 0xa8
 8000eba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec4:	f107 0320 	add.w	r3, r7, #32
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 fb9d 	bl	8002608 <HAL_RCC_OscConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ed4:	f000 f974 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed8:	230f      	movs	r3, #15
 8000eda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000edc:	2302      	movs	r3, #2
 8000ede:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ee4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ee8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fdfe 	bl	8002af8 <HAL_RCC_ClockConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f02:	f000 f95d 	bl	80011c0 <Error_Handler>
  }
}
 8000f06:	bf00      	nop
 8000f08:	3750      	adds	r7, #80	; 0x50
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40007000 	.word	0x40007000

08000f18 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <MX_ETH_Init+0x84>)
 8000f1e:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <MX_ETH_Init+0x88>)
 8000f20:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <MX_ETH_Init+0x8c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_ETH_Init+0x8c>)
 8000f2a:	2280      	movs	r2, #128	; 0x80
 8000f2c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_ETH_Init+0x8c>)
 8000f30:	22e1      	movs	r2, #225	; 0xe1
 8000f32:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_ETH_Init+0x8c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_ETH_Init+0x8c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_ETH_Init+0x8c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_ETH_Init+0x84>)
 8000f48:	4a16      	ldr	r2, [pc, #88]	; (8000fa4 <MX_ETH_Init+0x8c>)
 8000f4a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <MX_ETH_Init+0x84>)
 8000f4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f52:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_ETH_Init+0x84>)
 8000f56:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <MX_ETH_Init+0x90>)
 8000f58:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <MX_ETH_Init+0x84>)
 8000f5c:	4a13      	ldr	r2, [pc, #76]	; (8000fac <MX_ETH_Init+0x94>)
 8000f5e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_ETH_Init+0x84>)
 8000f62:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f66:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f68:	480c      	ldr	r0, [pc, #48]	; (8000f9c <MX_ETH_Init+0x84>)
 8000f6a:	f000 fd57 	bl	8001a1c <HAL_ETH_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000f74:	f000 f924 	bl	80011c0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f78:	2238      	movs	r2, #56	; 0x38
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <MX_ETH_Init+0x98>)
 8000f7e:	f002 fec9 	bl	8003d14 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_ETH_Init+0x98>)
 8000f84:	2221      	movs	r2, #33	; 0x21
 8000f86:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_ETH_Init+0x98>)
 8000f8a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000f8e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <MX_ETH_Init+0x98>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000280 	.word	0x20000280
 8000fa0:	40028000 	.word	0x40028000
 8000fa4:	2000090c 	.word	0x2000090c
 8000fa8:	200001e0 	.word	0x200001e0
 8000fac:	20000140 	.word	0x20000140
 8000fb0:	20000108 	.word	0x20000108

08000fb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <MX_USART3_UART_Init+0x50>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fec:	f001 ffa4 	bl	8002f38 <HAL_UART_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ff6:	f000 f8e3 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000330 	.word	0x20000330
 8001004:	40004800 	.word	0x40004800

08001008 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001012:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001016:	2204      	movs	r2, #4
 8001018:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101c:	2202      	movs	r2, #2
 800101e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001028:	2202      	movs	r2, #2
 800102a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800102e:	2201      	movs	r2, #1
 8001030:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001040:	2201      	movs	r2, #1
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001046:	2200      	movs	r2, #0
 8001048:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800104c:	f001 f9bf 	bl	80023ce <HAL_PCD_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001056:	f000 f8b3 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000374 	.word	0x20000374

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	4b4c      	ldr	r3, [pc, #304]	; (80011b0 <MX_GPIO_Init+0x14c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a4b      	ldr	r2, [pc, #300]	; (80011b0 <MX_GPIO_Init+0x14c>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b49      	ldr	r3, [pc, #292]	; (80011b0 <MX_GPIO_Init+0x14c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <MX_GPIO_Init+0x14c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a44      	ldr	r2, [pc, #272]	; (80011b0 <MX_GPIO_Init+0x14c>)
 80010a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b42      	ldr	r3, [pc, #264]	; (80011b0 <MX_GPIO_Init+0x14c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <MX_GPIO_Init+0x14c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a3d      	ldr	r2, [pc, #244]	; (80011b0 <MX_GPIO_Init+0x14c>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <MX_GPIO_Init+0x14c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b37      	ldr	r3, [pc, #220]	; (80011b0 <MX_GPIO_Init+0x14c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a36      	ldr	r2, [pc, #216]	; (80011b0 <MX_GPIO_Init+0x14c>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <MX_GPIO_Init+0x14c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <MX_GPIO_Init+0x14c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <MX_GPIO_Init+0x14c>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <MX_GPIO_Init+0x14c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <MX_GPIO_Init+0x14c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <MX_GPIO_Init+0x14c>)
 8001110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <MX_GPIO_Init+0x14c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f244 0181 	movw	r1, #16513	; 0x4081
 8001128:	4822      	ldr	r0, [pc, #136]	; (80011b4 <MX_GPIO_Init+0x150>)
 800112a:	f001 f937 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2140      	movs	r1, #64	; 0x40
 8001132:	4821      	ldr	r0, [pc, #132]	; (80011b8 <MX_GPIO_Init+0x154>)
 8001134:	f001 f932 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	481b      	ldr	r0, [pc, #108]	; (80011bc <MX_GPIO_Init+0x158>)
 8001150:	f000 ff78 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001154:	f244 0381 	movw	r3, #16513	; 0x4081
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4619      	mov	r1, r3
 800116c:	4811      	ldr	r0, [pc, #68]	; (80011b4 <MX_GPIO_Init+0x150>)
 800116e:	f000 ff69 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001172:	2340      	movs	r3, #64	; 0x40
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	480b      	ldr	r0, [pc, #44]	; (80011b8 <MX_GPIO_Init+0x154>)
 800118a:	f000 ff5b 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800118e:	2380      	movs	r3, #128	; 0x80
 8001190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_GPIO_Init+0x154>)
 80011a2:	f000 ff4f 	bl	8002044 <HAL_GPIO_Init>

}
 80011a6:	bf00      	nop
 80011a8:	3730      	adds	r7, #48	; 0x30
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40021800 	.word	0x40021800
 80011bc:	40020800 	.word	0x40020800

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>
	...

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_MspInit+0x4c>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_MspInit+0x4c>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08e      	sub	sp, #56	; 0x38
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a55      	ldr	r2, [pc, #340]	; (8001390 <HAL_ETH_MspInit+0x174>)
 800123a:	4293      	cmp	r3, r2
 800123c:	f040 80a4 	bne.w	8001388 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
 8001244:	4b53      	ldr	r3, [pc, #332]	; (8001394 <HAL_ETH_MspInit+0x178>)
 8001246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001248:	4a52      	ldr	r2, [pc, #328]	; (8001394 <HAL_ETH_MspInit+0x178>)
 800124a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800124e:	6313      	str	r3, [r2, #48]	; 0x30
 8001250:	4b50      	ldr	r3, [pc, #320]	; (8001394 <HAL_ETH_MspInit+0x178>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	4b4c      	ldr	r3, [pc, #304]	; (8001394 <HAL_ETH_MspInit+0x178>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	4a4b      	ldr	r2, [pc, #300]	; (8001394 <HAL_ETH_MspInit+0x178>)
 8001266:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800126a:	6313      	str	r3, [r2, #48]	; 0x30
 800126c:	4b49      	ldr	r3, [pc, #292]	; (8001394 <HAL_ETH_MspInit+0x178>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	4b45      	ldr	r3, [pc, #276]	; (8001394 <HAL_ETH_MspInit+0x178>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	4a44      	ldr	r2, [pc, #272]	; (8001394 <HAL_ETH_MspInit+0x178>)
 8001282:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001286:	6313      	str	r3, [r2, #48]	; 0x30
 8001288:	4b42      	ldr	r3, [pc, #264]	; (8001394 <HAL_ETH_MspInit+0x178>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <HAL_ETH_MspInit+0x178>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	4a3d      	ldr	r2, [pc, #244]	; (8001394 <HAL_ETH_MspInit+0x178>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6313      	str	r3, [r2, #48]	; 0x30
 80012a4:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <HAL_ETH_MspInit+0x178>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	4b37      	ldr	r3, [pc, #220]	; (8001394 <HAL_ETH_MspInit+0x178>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	4a36      	ldr	r2, [pc, #216]	; (8001394 <HAL_ETH_MspInit+0x178>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6313      	str	r3, [r2, #48]	; 0x30
 80012c0:	4b34      	ldr	r3, [pc, #208]	; (8001394 <HAL_ETH_MspInit+0x178>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_ETH_MspInit+0x178>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	4a2f      	ldr	r2, [pc, #188]	; (8001394 <HAL_ETH_MspInit+0x178>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	6313      	str	r3, [r2, #48]	; 0x30
 80012dc:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <HAL_ETH_MspInit+0x178>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	4b29      	ldr	r3, [pc, #164]	; (8001394 <HAL_ETH_MspInit+0x178>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	4a28      	ldr	r2, [pc, #160]	; (8001394 <HAL_ETH_MspInit+0x178>)
 80012f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f6:	6313      	str	r3, [r2, #48]	; 0x30
 80012f8:	4b26      	ldr	r3, [pc, #152]	; (8001394 <HAL_ETH_MspInit+0x178>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001304:	2332      	movs	r3, #50	; 0x32
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001314:	230b      	movs	r3, #11
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131c:	4619      	mov	r1, r3
 800131e:	481e      	ldr	r0, [pc, #120]	; (8001398 <HAL_ETH_MspInit+0x17c>)
 8001320:	f000 fe90 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001324:	2386      	movs	r3, #134	; 0x86
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001334:	230b      	movs	r3, #11
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	4817      	ldr	r0, [pc, #92]	; (800139c <HAL_ETH_MspInit+0x180>)
 8001340:	f000 fe80 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001356:	230b      	movs	r3, #11
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	480f      	ldr	r0, [pc, #60]	; (80013a0 <HAL_ETH_MspInit+0x184>)
 8001362:	f000 fe6f 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001366:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001378:	230b      	movs	r3, #11
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	4619      	mov	r1, r3
 8001382:	4808      	ldr	r0, [pc, #32]	; (80013a4 <HAL_ETH_MspInit+0x188>)
 8001384:	f000 fe5e 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3738      	adds	r7, #56	; 0x38
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40028000 	.word	0x40028000
 8001394:	40023800 	.word	0x40023800
 8001398:	40020800 	.word	0x40020800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40021800 	.word	0x40021800

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a19      	ldr	r2, [pc, #100]	; (800142c <HAL_UART_MspInit+0x84>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d12c      	bne.n	8001424 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a17      	ldr	r2, [pc, #92]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a10      	ldr	r2, [pc, #64]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013f0:	f043 0308 	orr.w	r3, r3, #8
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_UART_MspInit+0x88>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001402:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001414:	2307      	movs	r3, #7
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <HAL_UART_MspInit+0x8c>)
 8001420:	f000 fe10 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40004800 	.word	0x40004800
 8001430:	40023800 	.word	0x40023800
 8001434:	40020c00 	.word	0x40020c00

08001438 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001458:	d13f      	bne.n	80014da <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_PCD_MspInit+0xac>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a20      	ldr	r2, [pc, #128]	; (80014e4 <HAL_PCD_MspInit+0xac>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_PCD_MspInit+0xac>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001476:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001488:	230a      	movs	r3, #10
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4815      	ldr	r0, [pc, #84]	; (80014e8 <HAL_PCD_MspInit+0xb0>)
 8001494:	f000 fdd6 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	480e      	ldr	r0, [pc, #56]	; (80014e8 <HAL_PCD_MspInit+0xb0>)
 80014ae:	f000 fdc9 	bl	8002044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <HAL_PCD_MspInit+0xac>)
 80014b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <HAL_PCD_MspInit+0xac>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	6353      	str	r3, [r2, #52]	; 0x34
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_PCD_MspInit+0xac>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_PCD_MspInit+0xac>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	; 0x44
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_PCD_MspInit+0xac>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <NMI_Handler+0x4>

080014f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <MemManage_Handler+0x4>

080014fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <UsageFault_Handler+0x4>

0800150a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001510:	f3ef 8314 	mrs	r3, CONTROL
 8001514:	607b      	str	r3, [r7, #4]
  return(result);
 8001516:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 8001518:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	f383 8814 	msr	CONTROL, r3
}
 800152c:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155a:	f000 f935 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}

08001562 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e00a      	b.n	800158a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001574:	f3af 8000 	nop.w
 8001578:	4601      	mov	r1, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	60ba      	str	r2, [r7, #8]
 8001580:	b2ca      	uxtb	r2, r1
 8001582:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	3301      	adds	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	429a      	cmp	r2, r3
 8001590:	dbf0      	blt.n	8001574 <_read+0x12>
	}

return len;
 8001592:	687b      	ldr	r3, [r7, #4]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e009      	b.n	80015c2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	60ba      	str	r2, [r7, #8]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff f8bc 	bl	8000734 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	3301      	adds	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	dbf1      	blt.n	80015ae <_write+0x12>
	}
	return len;
 80015ca:	687b      	ldr	r3, [r7, #4]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_close>:

int _close(int file)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	return -1;
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015fc:	605a      	str	r2, [r3, #4]
	return 0;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_isatty>:

int _isatty(int file)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	return 1;
 8001614:	2301      	movs	r3, #1
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001622:	b480      	push	{r7}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
	return 0;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <_sbrk+0x5c>)
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <_sbrk+0x60>)
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <_sbrk+0x64>)
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <_sbrk+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	429a      	cmp	r2, r3
 800166a:	d207      	bcs.n	800167c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800166c:	f002 fb28 	bl	8003cc0 <__errno>
 8001670:	4603      	mov	r3, r0
 8001672:	220c      	movs	r2, #12
 8001674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	e009      	b.n	8001690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <_sbrk+0x64>)
 800168c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20030000 	.word	0x20030000
 800169c:	00000400 	.word	0x00000400
 80016a0:	20000914 	.word	0x20000914
 80016a4:	20000930 	.word	0x20000930

080016a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <SystemInit+0x20>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <SystemInit+0x20>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 80016cc:	bf00      	nop
  nop
 80016ce:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001708 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d4:	480d      	ldr	r0, [pc, #52]	; (800170c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016d6:	490e      	ldr	r1, [pc, #56]	; (8001710 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016d8:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016ec:	4c0b      	ldr	r4, [pc, #44]	; (800171c <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016fa:	f7ff ffd5 	bl	80016a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fe:	f002 fae5 	bl	8003ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001702:	f7ff faaf 	bl	8000c64 <main>
  bx  lr    
 8001706:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001708:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001714:	08004d60 	.word	0x08004d60
  ldr r2, =_sbss
 8001718:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 800171c:	2000092c 	.word	0x2000092c

08001720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_Init+0x40>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_Init+0x40>)
 800173a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_Init+0x40>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f931 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f808 	bl	8001768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff fd38 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023c00 	.word	0x40023c00

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_InitTick+0x54>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x58>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f93b 	bl	8001a02 <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f911 	bl	80019ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <HAL_InitTick+0x5c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2000007c 	.word	0x2000007c
 80017c0:	20000084 	.word	0x20000084
 80017c4:	20000080 	.word	0x20000080

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000084 	.word	0x20000084
 80017ec:	20000918 	.word	0x20000918

080017f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000918 	.word	0x20000918

08001808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff ffee 	bl	80017f0 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_Delay+0x44>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffde 	bl	80017f0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000084 	.word	0x20000084

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f7ff ff8e 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff47 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff5c 	bl	8001898 <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff8e 	bl	8001908 <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5d 	bl	80018b4 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffb0 	bl	8001970 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e06c      	b.n	8001b08 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d106      	bne.n	8001a46 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2223      	movs	r2, #35	; 0x23
 8001a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff fbeb 	bl	800121c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <HAL_ETH_Init+0xf4>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a30      	ldr	r2, [pc, #192]	; (8001b10 <HAL_ETH_Init+0xf4>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_ETH_Init+0xf4>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a62:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <HAL_ETH_Init+0xf8>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4a2b      	ldr	r2, [pc, #172]	; (8001b14 <HAL_ETH_Init+0xf8>)
 8001a68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a6c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_ETH_Init+0xf8>)
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	4927      	ldr	r1, [pc, #156]	; (8001b14 <HAL_ETH_Init+0xf8>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001a7c:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <HAL_ETH_Init+0xf8>)
 8001a7e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a98:	f7ff feaa 	bl	80017f0 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a9e:	e011      	b.n	8001ac4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001aa0:	f7ff fea6 	bl	80017f0 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001aae:	d909      	bls.n	8001ac4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	22e0      	movs	r2, #224	; 0xe0
 8001abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e021      	b.n	8001b08 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1e4      	bne.n	8001aa0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f944 	bl	8001d64 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f9eb 	bl	8001eb8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 fa41 	bl	8001f6a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	461a      	mov	r2, r3
 8001aee:	2100      	movs	r1, #0
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f9a9 	bl	8001e48 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2210      	movs	r2, #16
 8001b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40013800 	.word	0x40013800

08001b18 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <ETH_SetMACConfig+0x134>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	7c1b      	ldrb	r3, [r3, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <ETH_SetMACConfig+0x28>
 8001b3a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b3e:	e000      	b.n	8001b42 <ETH_SetMACConfig+0x2a>
 8001b40:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	7c5b      	ldrb	r3, [r3, #17]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <ETH_SetMACConfig+0x38>
 8001b4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b4e:	e000      	b.n	8001b52 <ETH_SetMACConfig+0x3a>
 8001b50:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b52:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	7fdb      	ldrb	r3, [r3, #31]
 8001b5e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001b60:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	7f92      	ldrb	r2, [r2, #30]
 8001b6c:	2a00      	cmp	r2, #0
 8001b6e:	d102      	bne.n	8001b76 <ETH_SetMACConfig+0x5e>
 8001b70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b74:	e000      	b.n	8001b78 <ETH_SetMACConfig+0x60>
 8001b76:	2200      	movs	r2, #0
                        macconf->Speed |
 8001b78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	7f1b      	ldrb	r3, [r3, #28]
 8001b7e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b80:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b86:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	791b      	ldrb	r3, [r3, #4]
 8001b8c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001b8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b96:	2a00      	cmp	r2, #0
 8001b98:	d102      	bne.n	8001ba0 <ETH_SetMACConfig+0x88>
 8001b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b9e:	e000      	b.n	8001ba2 <ETH_SetMACConfig+0x8a>
 8001ba0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ba2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	7bdb      	ldrb	r3, [r3, #15]
 8001ba8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001baa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001bb0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bb8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f7ff fe18 	bl	8001808 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001bee:	4013      	ands	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001bfe:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001c04:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001c0c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001c14:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c34:	2001      	movs	r0, #1
 8001c36:	f7ff fde7 	bl	8001808 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	619a      	str	r2, [r3, #24]
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	ff20810f 	.word	0xff20810f

08001c50 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <ETH_SetDMAConfig+0x110>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	7b1b      	ldrb	r3, [r3, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <ETH_SetDMAConfig+0x2c>
 8001c76:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c7a:	e000      	b.n	8001c7e <ETH_SetDMAConfig+0x2e>
 8001c7c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	7b5b      	ldrb	r3, [r3, #13]
 8001c82:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c84:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	7f52      	ldrb	r2, [r2, #29]
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d102      	bne.n	8001c94 <ETH_SetDMAConfig+0x44>
 8001c8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c92:	e000      	b.n	8001c96 <ETH_SetDMAConfig+0x46>
 8001c94:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c96:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	7b9b      	ldrb	r3, [r3, #14]
 8001c9c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c9e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ca4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	7f1b      	ldrb	r3, [r3, #28]
 8001caa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001cac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	7f9b      	ldrb	r3, [r3, #30]
 8001cb2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001cb4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001cba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cc2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f7ff fd8e 	bl	8001808 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	791b      	ldrb	r3, [r3, #4]
 8001cfe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d04:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001d0a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d10:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d18:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001d1a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d22:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d28:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d36:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d44:	2001      	movs	r0, #1
 8001d46:	f7ff fd5f 	bl	8001808 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	f8de3f23 	.word	0xf8de3f23

08001d64 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b0a6      	sub	sp, #152	; 0x98
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001d72:	2301      	movs	r3, #1
 8001d74:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001da0:	2300      	movs	r3, #0
 8001da2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001dc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dca:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001dcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001dd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ddc:	4619      	mov	r1, r3
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff fe9a 	bl	8001b18 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001de4:	2301      	movs	r3, #1
 8001de6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001de8:	2301      	movs	r3, #1
 8001dea:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001dec:	2301      	movs	r3, #1
 8001dee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001df2:	2301      	movs	r3, #1
 8001df4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e06:	2300      	movs	r3, #0
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e10:	2301      	movs	r3, #1
 8001e12:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e18:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e1e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e24:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e34:	f107 0308 	add.w	r3, r7, #8
 8001e38:	4619      	mov	r1, r3
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ff08 	bl	8001c50 <ETH_SetDMAConfig>
}
 8001e40:	bf00      	nop
 8001e42:	3798      	adds	r7, #152	; 0x98
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3305      	adds	r3, #5
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	021b      	lsls	r3, r3, #8
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	3204      	adds	r2, #4
 8001e60:	7812      	ldrb	r2, [r2, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <ETH_MACAddressConfig+0x68>)
 8001e6a:	4413      	add	r3, r2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3303      	adds	r3, #3
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	061a      	lsls	r2, r3, #24
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	041b      	lsls	r3, r3, #16
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3301      	adds	r3, #1
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	7812      	ldrb	r2, [r2, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <ETH_MACAddressConfig+0x6c>)
 8001e9a:	4413      	add	r3, r2
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	6013      	str	r3, [r2, #0]
}
 8001ea2:	bf00      	nop
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40028040 	.word	0x40028040
 8001eb4:	40028044 	.word	0x40028044

08001eb8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	e03e      	b.n	8001f44 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68d9      	ldr	r1, [r3, #12]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	440b      	add	r3, r1
 8001ed6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	3206      	adds	r2, #6
 8001ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d80c      	bhi.n	8001f28 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68d9      	ldr	r1, [r3, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	461a      	mov	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	e004      	b.n	8001f32 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3301      	adds	r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d9bd      	bls.n	8001ec6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5c:	611a      	str	r2, [r3, #16]
}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b085      	sub	sp, #20
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	e046      	b.n	8002006 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6919      	ldr	r1, [r3, #16]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	440b      	add	r3, r1
 8001f88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2200      	movs	r2, #0
 8001f94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001fb4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001fbc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	3212      	adds	r2, #18
 8001fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d80c      	bhi.n	8001ff6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6919      	ldr	r1, [r3, #16]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	e004      	b.n	8002000 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3301      	adds	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d9b5      	bls.n	8001f78 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002036:	60da      	str	r2, [r3, #12]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e177      	b.n	8002350 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 8166 	bne.w	800234a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d005      	beq.n	8002096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002092:	2b02      	cmp	r3, #2
 8002094:	d130      	bne.n	80020f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 0201 	and.w	r2, r3, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b03      	cmp	r3, #3
 8002102:	d017      	beq.n	8002134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d123      	bne.n	8002188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80c0 	beq.w	800234a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b66      	ldr	r3, [pc, #408]	; (8002368 <HAL_GPIO_Init+0x324>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	4a65      	ldr	r2, [pc, #404]	; (8002368 <HAL_GPIO_Init+0x324>)
 80021d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d8:	6453      	str	r3, [r2, #68]	; 0x44
 80021da:	4b63      	ldr	r3, [pc, #396]	; (8002368 <HAL_GPIO_Init+0x324>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e6:	4a61      	ldr	r2, [pc, #388]	; (800236c <HAL_GPIO_Init+0x328>)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	3302      	adds	r3, #2
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	220f      	movs	r2, #15
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a58      	ldr	r2, [pc, #352]	; (8002370 <HAL_GPIO_Init+0x32c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d037      	beq.n	8002282 <HAL_GPIO_Init+0x23e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a57      	ldr	r2, [pc, #348]	; (8002374 <HAL_GPIO_Init+0x330>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d031      	beq.n	800227e <HAL_GPIO_Init+0x23a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a56      	ldr	r2, [pc, #344]	; (8002378 <HAL_GPIO_Init+0x334>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d02b      	beq.n	800227a <HAL_GPIO_Init+0x236>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a55      	ldr	r2, [pc, #340]	; (800237c <HAL_GPIO_Init+0x338>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d025      	beq.n	8002276 <HAL_GPIO_Init+0x232>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a54      	ldr	r2, [pc, #336]	; (8002380 <HAL_GPIO_Init+0x33c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01f      	beq.n	8002272 <HAL_GPIO_Init+0x22e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a53      	ldr	r2, [pc, #332]	; (8002384 <HAL_GPIO_Init+0x340>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d019      	beq.n	800226e <HAL_GPIO_Init+0x22a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a52      	ldr	r2, [pc, #328]	; (8002388 <HAL_GPIO_Init+0x344>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_GPIO_Init+0x226>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a51      	ldr	r2, [pc, #324]	; (800238c <HAL_GPIO_Init+0x348>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00d      	beq.n	8002266 <HAL_GPIO_Init+0x222>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a50      	ldr	r2, [pc, #320]	; (8002390 <HAL_GPIO_Init+0x34c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d007      	beq.n	8002262 <HAL_GPIO_Init+0x21e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4f      	ldr	r2, [pc, #316]	; (8002394 <HAL_GPIO_Init+0x350>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d101      	bne.n	800225e <HAL_GPIO_Init+0x21a>
 800225a:	2309      	movs	r3, #9
 800225c:	e012      	b.n	8002284 <HAL_GPIO_Init+0x240>
 800225e:	230a      	movs	r3, #10
 8002260:	e010      	b.n	8002284 <HAL_GPIO_Init+0x240>
 8002262:	2308      	movs	r3, #8
 8002264:	e00e      	b.n	8002284 <HAL_GPIO_Init+0x240>
 8002266:	2307      	movs	r3, #7
 8002268:	e00c      	b.n	8002284 <HAL_GPIO_Init+0x240>
 800226a:	2306      	movs	r3, #6
 800226c:	e00a      	b.n	8002284 <HAL_GPIO_Init+0x240>
 800226e:	2305      	movs	r3, #5
 8002270:	e008      	b.n	8002284 <HAL_GPIO_Init+0x240>
 8002272:	2304      	movs	r3, #4
 8002274:	e006      	b.n	8002284 <HAL_GPIO_Init+0x240>
 8002276:	2303      	movs	r3, #3
 8002278:	e004      	b.n	8002284 <HAL_GPIO_Init+0x240>
 800227a:	2302      	movs	r3, #2
 800227c:	e002      	b.n	8002284 <HAL_GPIO_Init+0x240>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_GPIO_Init+0x240>
 8002282:	2300      	movs	r3, #0
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	f002 0203 	and.w	r2, r2, #3
 800228a:	0092      	lsls	r2, r2, #2
 800228c:	4093      	lsls	r3, r2
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002294:	4935      	ldr	r1, [pc, #212]	; (800236c <HAL_GPIO_Init+0x328>)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	3302      	adds	r3, #2
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_GPIO_Init+0x354>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022c6:	4a34      	ldr	r2, [pc, #208]	; (8002398 <HAL_GPIO_Init+0x354>)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022cc:	4b32      	ldr	r3, [pc, #200]	; (8002398 <HAL_GPIO_Init+0x354>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f0:	4a29      	ldr	r2, [pc, #164]	; (8002398 <HAL_GPIO_Init+0x354>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022f6:	4b28      	ldr	r3, [pc, #160]	; (8002398 <HAL_GPIO_Init+0x354>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800231a:	4a1f      	ldr	r2, [pc, #124]	; (8002398 <HAL_GPIO_Init+0x354>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002320:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_GPIO_Init+0x354>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002344:	4a14      	ldr	r2, [pc, #80]	; (8002398 <HAL_GPIO_Init+0x354>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3301      	adds	r3, #1
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	2b0f      	cmp	r3, #15
 8002354:	f67f ae84 	bls.w	8002060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	40013800 	.word	0x40013800
 8002370:	40020000 	.word	0x40020000
 8002374:	40020400 	.word	0x40020400
 8002378:	40020800 	.word	0x40020800
 800237c:	40020c00 	.word	0x40020c00
 8002380:	40021000 	.word	0x40021000
 8002384:	40021400 	.word	0x40021400
 8002388:	40021800 	.word	0x40021800
 800238c:	40021c00 	.word	0x40021c00
 8002390:	40022000 	.word	0x40022000
 8002394:	40022400 	.word	0x40022400
 8002398:	40013c00 	.word	0x40013c00

0800239c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
 80023a8:	4613      	mov	r3, r2
 80023aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023ac:	787b      	ldrb	r3, [r7, #1]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023b8:	e003      	b.n	80023c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	041a      	lsls	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	619a      	str	r2, [r3, #24]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023d0:	b08f      	sub	sp, #60	; 0x3c
 80023d2:	af0a      	add	r7, sp, #40	; 0x28
 80023d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e10f      	b.n	8002600 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff f81c 	bl	8001438 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2203      	movs	r2, #3
 8002404:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f001 f9ad 	bl	800377e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	687e      	ldr	r6, [r7, #4]
 800242c:	466d      	mov	r5, sp
 800242e:	f106 0410 	add.w	r4, r6, #16
 8002432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800243a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800243e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002442:	1d33      	adds	r3, r6, #4
 8002444:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002446:	6838      	ldr	r0, [r7, #0]
 8002448:	f001 f938 	bl	80036bc <USB_CoreInit>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2202      	movs	r2, #2
 8002456:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0d0      	b.n	8002600 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f001 f99b 	bl	80037a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]
 800246e:	e04a      	b.n	8002506 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	333d      	adds	r3, #61	; 0x3d
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002484:	7bfa      	ldrb	r2, [r7, #15]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	333c      	adds	r3, #60	; 0x3c
 8002494:	7bfa      	ldrb	r2, [r7, #15]
 8002496:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	b298      	uxth	r0, r3
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	3344      	adds	r3, #68	; 0x44
 80024ac:	4602      	mov	r2, r0
 80024ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	3340      	adds	r3, #64	; 0x40
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	3348      	adds	r3, #72	; 0x48
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	334c      	adds	r3, #76	; 0x4c
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3354      	adds	r3, #84	; 0x54
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	3301      	adds	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	429a      	cmp	r2, r3
 800250e:	d3af      	bcc.n	8002470 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e044      	b.n	80025a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800256e:	7bfa      	ldrb	r2, [r7, #15]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	3301      	adds	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d3b5      	bcc.n	8002516 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	687e      	ldr	r6, [r7, #4]
 80025b2:	466d      	mov	r5, sp
 80025b4:	f106 0410 	add.w	r4, r6, #16
 80025b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80025c8:	1d33      	adds	r3, r6, #4
 80025ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025cc:	6838      	ldr	r0, [r7, #0]
 80025ce:	f001 f933 	bl	8003838 <USB_DevInit>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e00d      	b.n	8002600 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f001 fafe 	bl	8003bfa <USB_DevDisconnect>

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002608 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e267      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d075      	beq.n	8002712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002626:	4b88      	ldr	r3, [pc, #544]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b04      	cmp	r3, #4
 8002630:	d00c      	beq.n	800264c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002632:	4b85      	ldr	r3, [pc, #532]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800263a:	2b08      	cmp	r3, #8
 800263c:	d112      	bne.n	8002664 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263e:	4b82      	ldr	r3, [pc, #520]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800264a:	d10b      	bne.n	8002664 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264c:	4b7e      	ldr	r3, [pc, #504]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d05b      	beq.n	8002710 <HAL_RCC_OscConfig+0x108>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d157      	bne.n	8002710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e242      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266c:	d106      	bne.n	800267c <HAL_RCC_OscConfig+0x74>
 800266e:	4b76      	ldr	r3, [pc, #472]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a75      	ldr	r2, [pc, #468]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e01d      	b.n	80026b8 <HAL_RCC_OscConfig+0xb0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x98>
 8002686:	4b70      	ldr	r3, [pc, #448]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a6f      	ldr	r2, [pc, #444]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800268c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b6d      	ldr	r3, [pc, #436]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a6c      	ldr	r2, [pc, #432]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e00b      	b.n	80026b8 <HAL_RCC_OscConfig+0xb0>
 80026a0:	4b69      	ldr	r3, [pc, #420]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a68      	ldr	r2, [pc, #416]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b66      	ldr	r3, [pc, #408]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a65      	ldr	r2, [pc, #404]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80026b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7ff f896 	bl	80017f0 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c8:	f7ff f892 	bl	80017f0 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e207      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026da:	4b5b      	ldr	r3, [pc, #364]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0xc0>
 80026e6:	e014      	b.n	8002712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7ff f882 	bl	80017f0 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f0:	f7ff f87e 	bl	80017f0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e1f3      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002702:	4b51      	ldr	r3, [pc, #324]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0xe8>
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d063      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800271e:	4b4a      	ldr	r3, [pc, #296]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00b      	beq.n	8002742 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272a:	4b47      	ldr	r3, [pc, #284]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002732:	2b08      	cmp	r3, #8
 8002734:	d11c      	bne.n	8002770 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002736:	4b44      	ldr	r3, [pc, #272]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d116      	bne.n	8002770 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <HAL_RCC_OscConfig+0x152>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d001      	beq.n	800275a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e1c7      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275a:	4b3b      	ldr	r3, [pc, #236]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4937      	ldr	r1, [pc, #220]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276e:	e03a      	b.n	80027e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d020      	beq.n	80027ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002778:	4b34      	ldr	r3, [pc, #208]	; (800284c <HAL_RCC_OscConfig+0x244>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7ff f837 	bl	80017f0 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002786:	f7ff f833 	bl	80017f0 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e1a8      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002798:	4b2b      	ldr	r3, [pc, #172]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a4:	4b28      	ldr	r3, [pc, #160]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4925      	ldr	r1, [pc, #148]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]
 80027b8:	e015      	b.n	80027e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ba:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_RCC_OscConfig+0x244>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7ff f816 	bl	80017f0 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c8:	f7ff f812 	bl	80017f0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e187      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d036      	beq.n	8002860 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d016      	beq.n	8002828 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_RCC_OscConfig+0x248>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe fff6 	bl	80017f0 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002808:	f7fe fff2 	bl	80017f0 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e167      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_OscConfig+0x240>)
 800281c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x200>
 8002826:	e01b      	b.n	8002860 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <HAL_RCC_OscConfig+0x248>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7fe ffdf 	bl	80017f0 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	e00e      	b.n	8002854 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002836:	f7fe ffdb 	bl	80017f0 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d907      	bls.n	8002854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e150      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
 8002848:	40023800 	.word	0x40023800
 800284c:	42470000 	.word	0x42470000
 8002850:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	4b88      	ldr	r3, [pc, #544]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1ea      	bne.n	8002836 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8097 	beq.w	800299c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002872:	4b81      	ldr	r3, [pc, #516]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10f      	bne.n	800289e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b7d      	ldr	r3, [pc, #500]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a7c      	ldr	r2, [pc, #496]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b7a      	ldr	r3, [pc, #488]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289a:	2301      	movs	r3, #1
 800289c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289e:	4b77      	ldr	r3, [pc, #476]	; (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d118      	bne.n	80028dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028aa:	4b74      	ldr	r3, [pc, #464]	; (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a73      	ldr	r2, [pc, #460]	; (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b6:	f7fe ff9b 	bl	80017f0 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028be:	f7fe ff97 	bl	80017f0 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e10c      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <HAL_RCC_OscConfig+0x474>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x2ea>
 80028e4:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4a63      	ldr	r2, [pc, #396]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6713      	str	r3, [r2, #112]	; 0x70
 80028f0:	e01c      	b.n	800292c <HAL_RCC_OscConfig+0x324>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b05      	cmp	r3, #5
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x30c>
 80028fa:	4b5f      	ldr	r3, [pc, #380]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	4a5e      	ldr	r2, [pc, #376]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002900:	f043 0304 	orr.w	r3, r3, #4
 8002904:	6713      	str	r3, [r2, #112]	; 0x70
 8002906:	4b5c      	ldr	r3, [pc, #368]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	4a5b      	ldr	r2, [pc, #364]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6713      	str	r3, [r2, #112]	; 0x70
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0x324>
 8002914:	4b58      	ldr	r3, [pc, #352]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	4a57      	ldr	r2, [pc, #348]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	6713      	str	r3, [r2, #112]	; 0x70
 8002920:	4b55      	ldr	r3, [pc, #340]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	4a54      	ldr	r2, [pc, #336]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002926:	f023 0304 	bic.w	r3, r3, #4
 800292a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe ff5c 	bl	80017f0 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7fe ff58 	bl	80017f0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e0cb      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	4b49      	ldr	r3, [pc, #292]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0ee      	beq.n	800293c <HAL_RCC_OscConfig+0x334>
 800295e:	e014      	b.n	800298a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fe ff46 	bl	80017f0 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002966:	e00a      	b.n	800297e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002968:	f7fe ff42 	bl	80017f0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	; 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e0b5      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297e:	4b3e      	ldr	r3, [pc, #248]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1ee      	bne.n	8002968 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298a:	7dfb      	ldrb	r3, [r7, #23]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002990:	4b39      	ldr	r3, [pc, #228]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	4a38      	ldr	r2, [pc, #224]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80a1 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029a6:	4b34      	ldr	r3, [pc, #208]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d05c      	beq.n	8002a6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d141      	bne.n	8002a3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ba:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <HAL_RCC_OscConfig+0x478>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe ff16 	bl	80017f0 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c8:	f7fe ff12 	bl	80017f0 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e087      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69da      	ldr	r2, [r3, #28]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	019b      	lsls	r3, r3, #6
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	3b01      	subs	r3, #1
 8002a00:	041b      	lsls	r3, r3, #16
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	061b      	lsls	r3, r3, #24
 8002a0a:	491b      	ldr	r1, [pc, #108]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_RCC_OscConfig+0x478>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7fe feeb 	bl	80017f0 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7fe fee7 	bl	80017f0 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e05c      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x416>
 8002a3c:	e054      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <HAL_RCC_OscConfig+0x478>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe fed4 	bl	80017f0 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fed0 	bl	80017f0 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e045      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_RCC_OscConfig+0x470>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x444>
 8002a6a:	e03d      	b.n	8002ae8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e038      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a84:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <HAL_RCC_OscConfig+0x4ec>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d028      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d121      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d11a      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d111      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	3b01      	subs	r3, #1
 8002ace:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800

08002af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0cc      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b68      	ldr	r3, [pc, #416]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d90c      	bls.n	8002b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b65      	ldr	r3, [pc, #404]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b63      	ldr	r3, [pc, #396]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0b8      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b4c:	4b59      	ldr	r3, [pc, #356]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a58      	ldr	r2, [pc, #352]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b64:	4b53      	ldr	r3, [pc, #332]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a52      	ldr	r2, [pc, #328]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b70:	4b50      	ldr	r3, [pc, #320]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	494d      	ldr	r1, [pc, #308]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d044      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d119      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e07f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d003      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e06f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e067      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd6:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f023 0203 	bic.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4934      	ldr	r1, [pc, #208]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fe02 	bl	80017f0 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7fe fdfe 	bl	80017f0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e04f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	4b2b      	ldr	r3, [pc, #172]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 020c 	and.w	r2, r3, #12
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1eb      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c18:	4b25      	ldr	r3, [pc, #148]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d20c      	bcs.n	8002c40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e032      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c4c:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4916      	ldr	r1, [pc, #88]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c6a:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	490e      	ldr	r1, [pc, #56]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c7e:	f000 f821 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002c82:	4602      	mov	r2, r0
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	490a      	ldr	r1, [pc, #40]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	5ccb      	ldrb	r3, [r1, r3]
 8002c92:	fa22 f303 	lsr.w	r3, r2, r3
 8002c96:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fd62 	bl	8001768 <HAL_InitTick>

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023c00 	.word	0x40023c00
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	08004ca0 	.word	0x08004ca0
 8002cbc:	2000007c 	.word	0x2000007c
 8002cc0:	20000080 	.word	0x20000080

08002cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc8:	b094      	sub	sp, #80	; 0x50
 8002cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cdc:	4b79      	ldr	r3, [pc, #484]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d00d      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	f200 80e1 	bhi.w	8002eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8002cf6:	e0db      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b73      	ldr	r3, [pc, #460]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cfa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002cfc:	e0db      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cfe:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x208>)
 8002d00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d02:	e0d8      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d04:	4b6f      	ldr	r3, [pc, #444]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d0e:	4b6d      	ldr	r3, [pc, #436]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d063      	beq.n	8002de2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1a:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	099b      	lsrs	r3, r3, #6
 8002d20:	2200      	movs	r2, #0
 8002d22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d2e:	2300      	movs	r3, #0
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
 8002d32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d36:	4622      	mov	r2, r4
 8002d38:	462b      	mov	r3, r5
 8002d3a:	f04f 0000 	mov.w	r0, #0
 8002d3e:	f04f 0100 	mov.w	r1, #0
 8002d42:	0159      	lsls	r1, r3, #5
 8002d44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d48:	0150      	lsls	r0, r2, #5
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4621      	mov	r1, r4
 8002d50:	1a51      	subs	r1, r2, r1
 8002d52:	6139      	str	r1, [r7, #16]
 8002d54:	4629      	mov	r1, r5
 8002d56:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d68:	4659      	mov	r1, fp
 8002d6a:	018b      	lsls	r3, r1, #6
 8002d6c:	4651      	mov	r1, sl
 8002d6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d72:	4651      	mov	r1, sl
 8002d74:	018a      	lsls	r2, r1, #6
 8002d76:	4651      	mov	r1, sl
 8002d78:	ebb2 0801 	subs.w	r8, r2, r1
 8002d7c:	4659      	mov	r1, fp
 8002d7e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d96:	4690      	mov	r8, r2
 8002d98:	4699      	mov	r9, r3
 8002d9a:	4623      	mov	r3, r4
 8002d9c:	eb18 0303 	adds.w	r3, r8, r3
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	462b      	mov	r3, r5
 8002da4:	eb49 0303 	adc.w	r3, r9, r3
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002db6:	4629      	mov	r1, r5
 8002db8:	024b      	lsls	r3, r1, #9
 8002dba:	4621      	mov	r1, r4
 8002dbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	024a      	lsls	r2, r1, #9
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dca:	2200      	movs	r2, #0
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dd4:	f7fd fb2c 	bl	8000430 <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4613      	mov	r3, r2
 8002dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de0:	e058      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de2:	4b38      	ldr	r3, [pc, #224]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	099b      	lsrs	r3, r3, #6
 8002de8:	2200      	movs	r2, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	4611      	mov	r1, r2
 8002dee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002df2:	623b      	str	r3, [r7, #32]
 8002df4:	2300      	movs	r3, #0
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
 8002df8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	464b      	mov	r3, r9
 8002e00:	f04f 0000 	mov.w	r0, #0
 8002e04:	f04f 0100 	mov.w	r1, #0
 8002e08:	0159      	lsls	r1, r3, #5
 8002e0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0e:	0150      	lsls	r0, r2, #5
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4641      	mov	r1, r8
 8002e16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e34:	ebb2 040a 	subs.w	r4, r2, sl
 8002e38:	eb63 050b 	sbc.w	r5, r3, fp
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	00eb      	lsls	r3, r5, #3
 8002e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4a:	00e2      	lsls	r2, r4, #3
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	461d      	mov	r5, r3
 8002e50:	4643      	mov	r3, r8
 8002e52:	18e3      	adds	r3, r4, r3
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	464b      	mov	r3, r9
 8002e58:	eb45 0303 	adc.w	r3, r5, r3
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	028b      	lsls	r3, r1, #10
 8002e6e:	4621      	mov	r1, r4
 8002e70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e74:	4621      	mov	r1, r4
 8002e76:	028a      	lsls	r2, r1, #10
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	61fa      	str	r2, [r7, #28]
 8002e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e88:	f7fd fad2 	bl	8000430 <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4613      	mov	r3, r2
 8002e92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	0c1b      	lsrs	r3, r3, #16
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ea4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eae:	e002      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3750      	adds	r7, #80	; 0x50
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	00f42400 	.word	0x00f42400
 8002ecc:	007a1200 	.word	0x007a1200

08002ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	2000007c 	.word	0x2000007c

08002ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002eec:	f7ff fff0 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	0a9b      	lsrs	r3, r3, #10
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4903      	ldr	r1, [pc, #12]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	08004cb0 	.word	0x08004cb0

08002f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f14:	f7ff ffdc 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	0b5b      	lsrs	r3, r3, #13
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	4903      	ldr	r1, [pc, #12]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f26:	5ccb      	ldrb	r3, [r1, r3]
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40023800 	.word	0x40023800
 8002f34:	08004cb0 	.word	0x08004cb0

08002f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e03f      	b.n	8002fca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fe fa22 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2224      	movs	r2, #36	; 0x24
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f929 	bl	80031d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b08a      	sub	sp, #40	; 0x28
 8002fd6:	af02      	add	r7, sp, #8
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d17c      	bne.n	80030ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_UART_Transmit+0x2c>
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e075      	b.n	80030ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_UART_Transmit+0x3e>
 800300c:	2302      	movs	r3, #2
 800300e:	e06e      	b.n	80030ee <HAL_UART_Transmit+0x11c>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2221      	movs	r2, #33	; 0x21
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003026:	f7fe fbe3 	bl	80017f0 <HAL_GetTick>
 800302a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	88fa      	ldrh	r2, [r7, #6]
 8003030:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	88fa      	ldrh	r2, [r7, #6]
 8003036:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003040:	d108      	bne.n	8003054 <HAL_UART_Transmit+0x82>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	e003      	b.n	800305c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003064:	e02a      	b.n	80030bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2200      	movs	r2, #0
 800306e:	2180      	movs	r1, #128	; 0x80
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f840 	bl	80030f6 <UART_WaitOnFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e036      	b.n	80030ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10b      	bne.n	800309e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003094:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	3302      	adds	r3, #2
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	e007      	b.n	80030ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	3301      	adds	r3, #1
 80030ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1cf      	bne.n	8003066 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2200      	movs	r2, #0
 80030ce:	2140      	movs	r1, #64	; 0x40
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f810 	bl	80030f6 <UART_WaitOnFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e006      	b.n	80030ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	e000      	b.n	80030ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030ec:	2302      	movs	r3, #2
  }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3720      	adds	r7, #32
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b090      	sub	sp, #64	; 0x40
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	4613      	mov	r3, r2
 8003104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003106:	e050      	b.n	80031aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d04c      	beq.n	80031aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <UART_WaitOnFlagUntilTimeout+0x30>
 8003116:	f7fe fb6b 	bl	80017f0 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003122:	429a      	cmp	r2, r3
 8003124:	d241      	bcs.n	80031aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003130:	e853 3f00 	ldrex	r3, [r3]
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800313c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	330c      	adds	r3, #12
 8003144:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003146:	637a      	str	r2, [r7, #52]	; 0x34
 8003148:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800314c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800314e:	e841 2300 	strex	r3, r2, [r1]
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1e5      	bne.n	8003126 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3314      	adds	r3, #20
 8003160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	613b      	str	r3, [r7, #16]
   return(result);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	63bb      	str	r3, [r7, #56]	; 0x38
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3314      	adds	r3, #20
 8003178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800317a:	623a      	str	r2, [r7, #32]
 800317c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	69f9      	ldr	r1, [r7, #28]
 8003180:	6a3a      	ldr	r2, [r7, #32]
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	61bb      	str	r3, [r7, #24]
   return(result);
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e5      	bne.n	800315a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e00f      	b.n	80031ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4013      	ands	r3, r2
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	bf0c      	ite	eq
 80031ba:	2301      	moveq	r3, #1
 80031bc:	2300      	movne	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d09f      	beq.n	8003108 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3740      	adds	r7, #64	; 0x40
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d8:	b0c0      	sub	sp, #256	; 0x100
 80031da:	af00      	add	r7, sp, #0
 80031dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	68d9      	ldr	r1, [r3, #12]
 80031f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	ea40 0301 	orr.w	r3, r0, r1
 80031fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	431a      	orrs	r2, r3
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	431a      	orrs	r2, r3
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800322c:	f021 010c 	bic.w	r1, r1, #12
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800323a:	430b      	orrs	r3, r1
 800323c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800323e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800324a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324e:	6999      	ldr	r1, [r3, #24]
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	ea40 0301 	orr.w	r3, r0, r1
 800325a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b8f      	ldr	r3, [pc, #572]	; (80034a0 <UART_SetConfig+0x2cc>)
 8003264:	429a      	cmp	r2, r3
 8003266:	d005      	beq.n	8003274 <UART_SetConfig+0xa0>
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b8d      	ldr	r3, [pc, #564]	; (80034a4 <UART_SetConfig+0x2d0>)
 8003270:	429a      	cmp	r2, r3
 8003272:	d104      	bne.n	800327e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003274:	f7ff fe4c 	bl	8002f10 <HAL_RCC_GetPCLK2Freq>
 8003278:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800327c:	e003      	b.n	8003286 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800327e:	f7ff fe33 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8003282:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003290:	f040 810c 	bne.w	80034ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003298:	2200      	movs	r2, #0
 800329a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800329e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032a6:	4622      	mov	r2, r4
 80032a8:	462b      	mov	r3, r5
 80032aa:	1891      	adds	r1, r2, r2
 80032ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80032ae:	415b      	adcs	r3, r3
 80032b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032b6:	4621      	mov	r1, r4
 80032b8:	eb12 0801 	adds.w	r8, r2, r1
 80032bc:	4629      	mov	r1, r5
 80032be:	eb43 0901 	adc.w	r9, r3, r1
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032d6:	4690      	mov	r8, r2
 80032d8:	4699      	mov	r9, r3
 80032da:	4623      	mov	r3, r4
 80032dc:	eb18 0303 	adds.w	r3, r8, r3
 80032e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80032e4:	462b      	mov	r3, r5
 80032e6:	eb49 0303 	adc.w	r3, r9, r3
 80032ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80032fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003302:	460b      	mov	r3, r1
 8003304:	18db      	adds	r3, r3, r3
 8003306:	653b      	str	r3, [r7, #80]	; 0x50
 8003308:	4613      	mov	r3, r2
 800330a:	eb42 0303 	adc.w	r3, r2, r3
 800330e:	657b      	str	r3, [r7, #84]	; 0x54
 8003310:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003314:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003318:	f7fd f88a 	bl	8000430 <__aeabi_uldivmod>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4b61      	ldr	r3, [pc, #388]	; (80034a8 <UART_SetConfig+0x2d4>)
 8003322:	fba3 2302 	umull	r2, r3, r3, r2
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	011c      	lsls	r4, r3, #4
 800332a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800332e:	2200      	movs	r2, #0
 8003330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003334:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003338:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800333c:	4642      	mov	r2, r8
 800333e:	464b      	mov	r3, r9
 8003340:	1891      	adds	r1, r2, r2
 8003342:	64b9      	str	r1, [r7, #72]	; 0x48
 8003344:	415b      	adcs	r3, r3
 8003346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003348:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800334c:	4641      	mov	r1, r8
 800334e:	eb12 0a01 	adds.w	sl, r2, r1
 8003352:	4649      	mov	r1, r9
 8003354:	eb43 0b01 	adc.w	fp, r3, r1
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003364:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003368:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800336c:	4692      	mov	sl, r2
 800336e:	469b      	mov	fp, r3
 8003370:	4643      	mov	r3, r8
 8003372:	eb1a 0303 	adds.w	r3, sl, r3
 8003376:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800337a:	464b      	mov	r3, r9
 800337c:	eb4b 0303 	adc.w	r3, fp, r3
 8003380:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003390:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003394:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003398:	460b      	mov	r3, r1
 800339a:	18db      	adds	r3, r3, r3
 800339c:	643b      	str	r3, [r7, #64]	; 0x40
 800339e:	4613      	mov	r3, r2
 80033a0:	eb42 0303 	adc.w	r3, r2, r3
 80033a4:	647b      	str	r3, [r7, #68]	; 0x44
 80033a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033ae:	f7fd f83f 	bl	8000430 <__aeabi_uldivmod>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	4b3b      	ldr	r3, [pc, #236]	; (80034a8 <UART_SetConfig+0x2d4>)
 80033ba:	fba3 2301 	umull	r2, r3, r3, r1
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2264      	movs	r2, #100	; 0x64
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	1acb      	subs	r3, r1, r3
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033ce:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <UART_SetConfig+0x2d4>)
 80033d0:	fba3 2302 	umull	r2, r3, r3, r2
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033dc:	441c      	add	r4, r3
 80033de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80033ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80033f0:	4642      	mov	r2, r8
 80033f2:	464b      	mov	r3, r9
 80033f4:	1891      	adds	r1, r2, r2
 80033f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80033f8:	415b      	adcs	r3, r3
 80033fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003400:	4641      	mov	r1, r8
 8003402:	1851      	adds	r1, r2, r1
 8003404:	6339      	str	r1, [r7, #48]	; 0x30
 8003406:	4649      	mov	r1, r9
 8003408:	414b      	adcs	r3, r1
 800340a:	637b      	str	r3, [r7, #52]	; 0x34
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003418:	4659      	mov	r1, fp
 800341a:	00cb      	lsls	r3, r1, #3
 800341c:	4651      	mov	r1, sl
 800341e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003422:	4651      	mov	r1, sl
 8003424:	00ca      	lsls	r2, r1, #3
 8003426:	4610      	mov	r0, r2
 8003428:	4619      	mov	r1, r3
 800342a:	4603      	mov	r3, r0
 800342c:	4642      	mov	r2, r8
 800342e:	189b      	adds	r3, r3, r2
 8003430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003434:	464b      	mov	r3, r9
 8003436:	460a      	mov	r2, r1
 8003438:	eb42 0303 	adc.w	r3, r2, r3
 800343c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800344c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003450:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003454:	460b      	mov	r3, r1
 8003456:	18db      	adds	r3, r3, r3
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
 800345a:	4613      	mov	r3, r2
 800345c:	eb42 0303 	adc.w	r3, r2, r3
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003462:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003466:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800346a:	f7fc ffe1 	bl	8000430 <__aeabi_uldivmod>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <UART_SetConfig+0x2d4>)
 8003474:	fba3 1302 	umull	r1, r3, r3, r2
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	2164      	movs	r1, #100	; 0x64
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	3332      	adds	r3, #50	; 0x32
 8003486:	4a08      	ldr	r2, [pc, #32]	; (80034a8 <UART_SetConfig+0x2d4>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	f003 0207 	and.w	r2, r3, #7
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4422      	add	r2, r4
 800349a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800349c:	e105      	b.n	80036aa <UART_SetConfig+0x4d6>
 800349e:	bf00      	nop
 80034a0:	40011000 	.word	0x40011000
 80034a4:	40011400 	.word	0x40011400
 80034a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034b0:	2200      	movs	r2, #0
 80034b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034be:	4642      	mov	r2, r8
 80034c0:	464b      	mov	r3, r9
 80034c2:	1891      	adds	r1, r2, r2
 80034c4:	6239      	str	r1, [r7, #32]
 80034c6:	415b      	adcs	r3, r3
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ce:	4641      	mov	r1, r8
 80034d0:	1854      	adds	r4, r2, r1
 80034d2:	4649      	mov	r1, r9
 80034d4:	eb43 0501 	adc.w	r5, r3, r1
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	00eb      	lsls	r3, r5, #3
 80034e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e6:	00e2      	lsls	r2, r4, #3
 80034e8:	4614      	mov	r4, r2
 80034ea:	461d      	mov	r5, r3
 80034ec:	4643      	mov	r3, r8
 80034ee:	18e3      	adds	r3, r4, r3
 80034f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034f4:	464b      	mov	r3, r9
 80034f6:	eb45 0303 	adc.w	r3, r5, r3
 80034fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800350a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800351a:	4629      	mov	r1, r5
 800351c:	008b      	lsls	r3, r1, #2
 800351e:	4621      	mov	r1, r4
 8003520:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003524:	4621      	mov	r1, r4
 8003526:	008a      	lsls	r2, r1, #2
 8003528:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800352c:	f7fc ff80 	bl	8000430 <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4b60      	ldr	r3, [pc, #384]	; (80036b8 <UART_SetConfig+0x4e4>)
 8003536:	fba3 2302 	umull	r2, r3, r3, r2
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	011c      	lsls	r4, r3, #4
 800353e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003542:	2200      	movs	r2, #0
 8003544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003548:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800354c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003550:	4642      	mov	r2, r8
 8003552:	464b      	mov	r3, r9
 8003554:	1891      	adds	r1, r2, r2
 8003556:	61b9      	str	r1, [r7, #24]
 8003558:	415b      	adcs	r3, r3
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003560:	4641      	mov	r1, r8
 8003562:	1851      	adds	r1, r2, r1
 8003564:	6139      	str	r1, [r7, #16]
 8003566:	4649      	mov	r1, r9
 8003568:	414b      	adcs	r3, r1
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003578:	4659      	mov	r1, fp
 800357a:	00cb      	lsls	r3, r1, #3
 800357c:	4651      	mov	r1, sl
 800357e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003582:	4651      	mov	r1, sl
 8003584:	00ca      	lsls	r2, r1, #3
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	4603      	mov	r3, r0
 800358c:	4642      	mov	r2, r8
 800358e:	189b      	adds	r3, r3, r2
 8003590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003594:	464b      	mov	r3, r9
 8003596:	460a      	mov	r2, r1
 8003598:	eb42 0303 	adc.w	r3, r2, r3
 800359c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80035aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035b8:	4649      	mov	r1, r9
 80035ba:	008b      	lsls	r3, r1, #2
 80035bc:	4641      	mov	r1, r8
 80035be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c2:	4641      	mov	r1, r8
 80035c4:	008a      	lsls	r2, r1, #2
 80035c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035ca:	f7fc ff31 	bl	8000430 <__aeabi_uldivmod>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4b39      	ldr	r3, [pc, #228]	; (80036b8 <UART_SetConfig+0x4e4>)
 80035d4:	fba3 1302 	umull	r1, r3, r3, r2
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	2164      	movs	r1, #100	; 0x64
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	3332      	adds	r3, #50	; 0x32
 80035e6:	4a34      	ldr	r2, [pc, #208]	; (80036b8 <UART_SetConfig+0x4e4>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035f2:	441c      	add	r4, r3
 80035f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035f8:	2200      	movs	r2, #0
 80035fa:	673b      	str	r3, [r7, #112]	; 0x70
 80035fc:	677a      	str	r2, [r7, #116]	; 0x74
 80035fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003602:	4642      	mov	r2, r8
 8003604:	464b      	mov	r3, r9
 8003606:	1891      	adds	r1, r2, r2
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	415b      	adcs	r3, r3
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003612:	4641      	mov	r1, r8
 8003614:	1851      	adds	r1, r2, r1
 8003616:	6039      	str	r1, [r7, #0]
 8003618:	4649      	mov	r1, r9
 800361a:	414b      	adcs	r3, r1
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800362a:	4659      	mov	r1, fp
 800362c:	00cb      	lsls	r3, r1, #3
 800362e:	4651      	mov	r1, sl
 8003630:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003634:	4651      	mov	r1, sl
 8003636:	00ca      	lsls	r2, r1, #3
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	4603      	mov	r3, r0
 800363e:	4642      	mov	r2, r8
 8003640:	189b      	adds	r3, r3, r2
 8003642:	66bb      	str	r3, [r7, #104]	; 0x68
 8003644:	464b      	mov	r3, r9
 8003646:	460a      	mov	r2, r1
 8003648:	eb42 0303 	adc.w	r3, r2, r3
 800364c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800364e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	663b      	str	r3, [r7, #96]	; 0x60
 8003658:	667a      	str	r2, [r7, #100]	; 0x64
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003666:	4649      	mov	r1, r9
 8003668:	008b      	lsls	r3, r1, #2
 800366a:	4641      	mov	r1, r8
 800366c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003670:	4641      	mov	r1, r8
 8003672:	008a      	lsls	r2, r1, #2
 8003674:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003678:	f7fc feda 	bl	8000430 <__aeabi_uldivmod>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <UART_SetConfig+0x4e4>)
 8003682:	fba3 1302 	umull	r1, r3, r3, r2
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	2164      	movs	r1, #100	; 0x64
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	3332      	adds	r3, #50	; 0x32
 8003694:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <UART_SetConfig+0x4e4>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	f003 020f 	and.w	r2, r3, #15
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4422      	add	r2, r4
 80036a8:	609a      	str	r2, [r3, #8]
}
 80036aa:	bf00      	nop
 80036ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036b0:	46bd      	mov	sp, r7
 80036b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036b6:	bf00      	nop
 80036b8:	51eb851f 	.word	0x51eb851f

080036bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036bc:	b084      	sub	sp, #16
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	f107 001c 	add.w	r0, r7, #28
 80036ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d122      	bne.n	800371a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80036e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 faa2 	bl	8003c58 <USB_CoreReset>
 8003714:	4603      	mov	r3, r0
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	e01a      	b.n	8003750 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa96 	bl	8003c58 <USB_CoreReset>
 800372c:	4603      	mov	r3, r0
 800372e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	639a      	str	r2, [r3, #56]	; 0x38
 8003742:	e005      	b.n	8003750 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	2b01      	cmp	r3, #1
 8003754:	d10b      	bne.n	800376e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f043 0206 	orr.w	r2, r3, #6
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f043 0220 	orr.w	r2, r3, #32
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800377a:	b004      	add	sp, #16
 800377c:	4770      	bx	lr

0800377e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f023 0201 	bic.w	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d115      	bne.n	80037ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80037ce:	2001      	movs	r0, #1
 80037d0:	f7fe f81a 	bl	8001808 <HAL_Delay>
      ms++;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3301      	adds	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fa2e 	bl	8003c3c <USB_GetMode>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d01e      	beq.n	8003824 <USB_SetCurrentMode+0x84>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b31      	cmp	r3, #49	; 0x31
 80037ea:	d9f0      	bls.n	80037ce <USB_SetCurrentMode+0x2e>
 80037ec:	e01a      	b.n	8003824 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d115      	bne.n	8003820 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003800:	2001      	movs	r0, #1
 8003802:	f7fe f801 	bl	8001808 <HAL_Delay>
      ms++;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3301      	adds	r3, #1
 800380a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fa15 	bl	8003c3c <USB_GetMode>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <USB_SetCurrentMode+0x84>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b31      	cmp	r3, #49	; 0x31
 800381c:	d9f0      	bls.n	8003800 <USB_SetCurrentMode+0x60>
 800381e:	e001      	b.n	8003824 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e005      	b.n	8003830 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b32      	cmp	r3, #50	; 0x32
 8003828:	d101      	bne.n	800382e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003838:	b084      	sub	sp, #16
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	e009      	b.n	800386c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	3340      	adds	r3, #64	; 0x40
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	2200      	movs	r2, #0
 8003864:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3301      	adds	r3, #1
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b0e      	cmp	r3, #14
 8003870:	d9f2      	bls.n	8003858 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d11c      	bne.n	80038b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003886:	f043 0302 	orr.w	r3, r3, #2
 800388a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
 80038b0:	e00b      	b.n	80038ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038d0:	461a      	mov	r2, r3
 80038d2:	2300      	movs	r3, #0
 80038d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038dc:	4619      	mov	r1, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e4:	461a      	mov	r2, r3
 80038e6:	680b      	ldr	r3, [r1, #0]
 80038e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10c      	bne.n	800390a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d104      	bne.n	8003900 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038f6:	2100      	movs	r1, #0
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f965 	bl	8003bc8 <USB_SetDevSpeed>
 80038fe:	e008      	b.n	8003912 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003900:	2101      	movs	r1, #1
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f960 	bl	8003bc8 <USB_SetDevSpeed>
 8003908:	e003      	b.n	8003912 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800390a:	2103      	movs	r1, #3
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f95b 	bl	8003bc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003912:	2110      	movs	r1, #16
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f8f3 	bl	8003b00 <USB_FlushTxFifo>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f91f 	bl	8003b68 <USB_FlushRxFifo>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800393a:	461a      	mov	r2, r3
 800393c:	2300      	movs	r3, #0
 800393e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003946:	461a      	mov	r2, r3
 8003948:	2300      	movs	r3, #0
 800394a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003952:	461a      	mov	r2, r3
 8003954:	2300      	movs	r3, #0
 8003956:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003958:	2300      	movs	r3, #0
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	e043      	b.n	80039e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003974:	d118      	bne.n	80039a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003988:	461a      	mov	r2, r3
 800398a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	e013      	b.n	80039ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399e:	461a      	mov	r2, r3
 80039a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	e008      	b.n	80039ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b4:	461a      	mov	r2, r3
 80039b6:	2300      	movs	r3, #0
 80039b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c6:	461a      	mov	r2, r3
 80039c8:	2300      	movs	r3, #0
 80039ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d8:	461a      	mov	r2, r3
 80039da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	3301      	adds	r3, #1
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d3b7      	bcc.n	800395e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	e043      	b.n	8003a7c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a0a:	d118      	bne.n	8003a3e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e013      	b.n	8003a50 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a34:	461a      	mov	r2, r3
 8003a36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	e008      	b.n	8003a50 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d3b7      	bcc.n	80039f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003aa4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f043 0210 	orr.w	r2, r3, #16
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <USB_DevInit+0x2c4>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f043 0208 	orr.w	r2, r3, #8
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d107      	bne.n	8003aec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ae4:	f043 0304 	orr.w	r3, r3, #4
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003af8:	b004      	add	sp, #16
 8003afa:	4770      	bx	lr
 8003afc:	803c3800 	.word	0x803c3800

08003b00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3301      	adds	r3, #1
 8003b12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a13      	ldr	r2, [pc, #76]	; (8003b64 <USB_FlushTxFifo+0x64>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d901      	bls.n	8003b20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e01b      	b.n	8003b58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	daf2      	bge.n	8003b0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	019b      	lsls	r3, r3, #6
 8003b30:	f043 0220 	orr.w	r2, r3, #32
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <USB_FlushTxFifo+0x64>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e006      	b.n	8003b58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d0f0      	beq.n	8003b38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	00030d40 	.word	0x00030d40

08003b68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3301      	adds	r3, #1
 8003b78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4a11      	ldr	r2, [pc, #68]	; (8003bc4 <USB_FlushRxFifo+0x5c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e018      	b.n	8003bb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	daf2      	bge.n	8003b74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2210      	movs	r2, #16
 8003b96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4a08      	ldr	r2, [pc, #32]	; (8003bc4 <USB_FlushRxFifo+0x5c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d901      	bls.n	8003baa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e006      	b.n	8003bb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d0f0      	beq.n	8003b98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	00030d40 	.word	0x00030d40

08003bc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	68f9      	ldr	r1, [r7, #12]
 8003be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b085      	sub	sp, #20
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003c14:	f023 0303 	bic.w	r3, r3, #3
 8003c18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c28:	f043 0302 	orr.w	r3, r3, #2
 8003c2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f003 0301 	and.w	r3, r3, #1
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3301      	adds	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4a13      	ldr	r2, [pc, #76]	; (8003cbc <USB_CoreReset+0x64>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e01b      	b.n	8003cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	daf2      	bge.n	8003c64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f043 0201 	orr.w	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3301      	adds	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <USB_CoreReset+0x64>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d901      	bls.n	8003ca0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e006      	b.n	8003cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d0f0      	beq.n	8003c8e <USB_CoreReset+0x36>

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	00030d40 	.word	0x00030d40

08003cc0 <__errno>:
 8003cc0:	4b01      	ldr	r3, [pc, #4]	; (8003cc8 <__errno+0x8>)
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	20000088 	.word	0x20000088

08003ccc <__libc_init_array>:
 8003ccc:	b570      	push	{r4, r5, r6, lr}
 8003cce:	4d0d      	ldr	r5, [pc, #52]	; (8003d04 <__libc_init_array+0x38>)
 8003cd0:	4c0d      	ldr	r4, [pc, #52]	; (8003d08 <__libc_init_array+0x3c>)
 8003cd2:	1b64      	subs	r4, r4, r5
 8003cd4:	10a4      	asrs	r4, r4, #2
 8003cd6:	2600      	movs	r6, #0
 8003cd8:	42a6      	cmp	r6, r4
 8003cda:	d109      	bne.n	8003cf0 <__libc_init_array+0x24>
 8003cdc:	4d0b      	ldr	r5, [pc, #44]	; (8003d0c <__libc_init_array+0x40>)
 8003cde:	4c0c      	ldr	r4, [pc, #48]	; (8003d10 <__libc_init_array+0x44>)
 8003ce0:	f000 ffae 	bl	8004c40 <_init>
 8003ce4:	1b64      	subs	r4, r4, r5
 8003ce6:	10a4      	asrs	r4, r4, #2
 8003ce8:	2600      	movs	r6, #0
 8003cea:	42a6      	cmp	r6, r4
 8003cec:	d105      	bne.n	8003cfa <__libc_init_array+0x2e>
 8003cee:	bd70      	pop	{r4, r5, r6, pc}
 8003cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf4:	4798      	blx	r3
 8003cf6:	3601      	adds	r6, #1
 8003cf8:	e7ee      	b.n	8003cd8 <__libc_init_array+0xc>
 8003cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cfe:	4798      	blx	r3
 8003d00:	3601      	adds	r6, #1
 8003d02:	e7f2      	b.n	8003cea <__libc_init_array+0x1e>
 8003d04:	08004d58 	.word	0x08004d58
 8003d08:	08004d58 	.word	0x08004d58
 8003d0c:	08004d58 	.word	0x08004d58
 8003d10:	08004d5c 	.word	0x08004d5c

08003d14 <memset>:
 8003d14:	4402      	add	r2, r0
 8003d16:	4603      	mov	r3, r0
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d100      	bne.n	8003d1e <memset+0xa>
 8003d1c:	4770      	bx	lr
 8003d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d22:	e7f9      	b.n	8003d18 <memset+0x4>

08003d24 <iprintf>:
 8003d24:	b40f      	push	{r0, r1, r2, r3}
 8003d26:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <iprintf+0x2c>)
 8003d28:	b513      	push	{r0, r1, r4, lr}
 8003d2a:	681c      	ldr	r4, [r3, #0]
 8003d2c:	b124      	cbz	r4, 8003d38 <iprintf+0x14>
 8003d2e:	69a3      	ldr	r3, [r4, #24]
 8003d30:	b913      	cbnz	r3, 8003d38 <iprintf+0x14>
 8003d32:	4620      	mov	r0, r4
 8003d34:	f000 f866 	bl	8003e04 <__sinit>
 8003d38:	ab05      	add	r3, sp, #20
 8003d3a:	9a04      	ldr	r2, [sp, #16]
 8003d3c:	68a1      	ldr	r1, [r4, #8]
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	4620      	mov	r0, r4
 8003d42:	f000 f9bd 	bl	80040c0 <_vfiprintf_r>
 8003d46:	b002      	add	sp, #8
 8003d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d4c:	b004      	add	sp, #16
 8003d4e:	4770      	bx	lr
 8003d50:	20000088 	.word	0x20000088

08003d54 <std>:
 8003d54:	2300      	movs	r3, #0
 8003d56:	b510      	push	{r4, lr}
 8003d58:	4604      	mov	r4, r0
 8003d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8003d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d62:	6083      	str	r3, [r0, #8]
 8003d64:	8181      	strh	r1, [r0, #12]
 8003d66:	6643      	str	r3, [r0, #100]	; 0x64
 8003d68:	81c2      	strh	r2, [r0, #14]
 8003d6a:	6183      	str	r3, [r0, #24]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	2208      	movs	r2, #8
 8003d70:	305c      	adds	r0, #92	; 0x5c
 8003d72:	f7ff ffcf 	bl	8003d14 <memset>
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <std+0x38>)
 8003d78:	6263      	str	r3, [r4, #36]	; 0x24
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <std+0x3c>)
 8003d7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d7e:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <std+0x40>)
 8003d80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <std+0x44>)
 8003d84:	6224      	str	r4, [r4, #32]
 8003d86:	6323      	str	r3, [r4, #48]	; 0x30
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	bf00      	nop
 8003d8c:	08004669 	.word	0x08004669
 8003d90:	0800468b 	.word	0x0800468b
 8003d94:	080046c3 	.word	0x080046c3
 8003d98:	080046e7 	.word	0x080046e7

08003d9c <_cleanup_r>:
 8003d9c:	4901      	ldr	r1, [pc, #4]	; (8003da4 <_cleanup_r+0x8>)
 8003d9e:	f000 b8af 	b.w	8003f00 <_fwalk_reent>
 8003da2:	bf00      	nop
 8003da4:	080049c1 	.word	0x080049c1

08003da8 <__sfmoreglue>:
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	2268      	movs	r2, #104	; 0x68
 8003dac:	1e4d      	subs	r5, r1, #1
 8003dae:	4355      	muls	r5, r2
 8003db0:	460e      	mov	r6, r1
 8003db2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003db6:	f000 f8e5 	bl	8003f84 <_malloc_r>
 8003dba:	4604      	mov	r4, r0
 8003dbc:	b140      	cbz	r0, 8003dd0 <__sfmoreglue+0x28>
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	e9c0 1600 	strd	r1, r6, [r0]
 8003dc4:	300c      	adds	r0, #12
 8003dc6:	60a0      	str	r0, [r4, #8]
 8003dc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003dcc:	f7ff ffa2 	bl	8003d14 <memset>
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}

08003dd4 <__sfp_lock_acquire>:
 8003dd4:	4801      	ldr	r0, [pc, #4]	; (8003ddc <__sfp_lock_acquire+0x8>)
 8003dd6:	f000 b8b3 	b.w	8003f40 <__retarget_lock_acquire_recursive>
 8003dda:	bf00      	nop
 8003ddc:	2000091d 	.word	0x2000091d

08003de0 <__sfp_lock_release>:
 8003de0:	4801      	ldr	r0, [pc, #4]	; (8003de8 <__sfp_lock_release+0x8>)
 8003de2:	f000 b8ae 	b.w	8003f42 <__retarget_lock_release_recursive>
 8003de6:	bf00      	nop
 8003de8:	2000091d 	.word	0x2000091d

08003dec <__sinit_lock_acquire>:
 8003dec:	4801      	ldr	r0, [pc, #4]	; (8003df4 <__sinit_lock_acquire+0x8>)
 8003dee:	f000 b8a7 	b.w	8003f40 <__retarget_lock_acquire_recursive>
 8003df2:	bf00      	nop
 8003df4:	2000091e 	.word	0x2000091e

08003df8 <__sinit_lock_release>:
 8003df8:	4801      	ldr	r0, [pc, #4]	; (8003e00 <__sinit_lock_release+0x8>)
 8003dfa:	f000 b8a2 	b.w	8003f42 <__retarget_lock_release_recursive>
 8003dfe:	bf00      	nop
 8003e00:	2000091e 	.word	0x2000091e

08003e04 <__sinit>:
 8003e04:	b510      	push	{r4, lr}
 8003e06:	4604      	mov	r4, r0
 8003e08:	f7ff fff0 	bl	8003dec <__sinit_lock_acquire>
 8003e0c:	69a3      	ldr	r3, [r4, #24]
 8003e0e:	b11b      	cbz	r3, 8003e18 <__sinit+0x14>
 8003e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e14:	f7ff bff0 	b.w	8003df8 <__sinit_lock_release>
 8003e18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e1c:	6523      	str	r3, [r4, #80]	; 0x50
 8003e1e:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <__sinit+0x68>)
 8003e20:	4a13      	ldr	r2, [pc, #76]	; (8003e70 <__sinit+0x6c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e26:	42a3      	cmp	r3, r4
 8003e28:	bf04      	itt	eq
 8003e2a:	2301      	moveq	r3, #1
 8003e2c:	61a3      	streq	r3, [r4, #24]
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f000 f820 	bl	8003e74 <__sfp>
 8003e34:	6060      	str	r0, [r4, #4]
 8003e36:	4620      	mov	r0, r4
 8003e38:	f000 f81c 	bl	8003e74 <__sfp>
 8003e3c:	60a0      	str	r0, [r4, #8]
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f000 f818 	bl	8003e74 <__sfp>
 8003e44:	2200      	movs	r2, #0
 8003e46:	60e0      	str	r0, [r4, #12]
 8003e48:	2104      	movs	r1, #4
 8003e4a:	6860      	ldr	r0, [r4, #4]
 8003e4c:	f7ff ff82 	bl	8003d54 <std>
 8003e50:	68a0      	ldr	r0, [r4, #8]
 8003e52:	2201      	movs	r2, #1
 8003e54:	2109      	movs	r1, #9
 8003e56:	f7ff ff7d 	bl	8003d54 <std>
 8003e5a:	68e0      	ldr	r0, [r4, #12]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	2112      	movs	r1, #18
 8003e60:	f7ff ff78 	bl	8003d54 <std>
 8003e64:	2301      	movs	r3, #1
 8003e66:	61a3      	str	r3, [r4, #24]
 8003e68:	e7d2      	b.n	8003e10 <__sinit+0xc>
 8003e6a:	bf00      	nop
 8003e6c:	08004cb8 	.word	0x08004cb8
 8003e70:	08003d9d 	.word	0x08003d9d

08003e74 <__sfp>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	4607      	mov	r7, r0
 8003e78:	f7ff ffac 	bl	8003dd4 <__sfp_lock_acquire>
 8003e7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <__sfp+0x84>)
 8003e7e:	681e      	ldr	r6, [r3, #0]
 8003e80:	69b3      	ldr	r3, [r6, #24]
 8003e82:	b913      	cbnz	r3, 8003e8a <__sfp+0x16>
 8003e84:	4630      	mov	r0, r6
 8003e86:	f7ff ffbd 	bl	8003e04 <__sinit>
 8003e8a:	3648      	adds	r6, #72	; 0x48
 8003e8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	d503      	bpl.n	8003e9c <__sfp+0x28>
 8003e94:	6833      	ldr	r3, [r6, #0]
 8003e96:	b30b      	cbz	r3, 8003edc <__sfp+0x68>
 8003e98:	6836      	ldr	r6, [r6, #0]
 8003e9a:	e7f7      	b.n	8003e8c <__sfp+0x18>
 8003e9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ea0:	b9d5      	cbnz	r5, 8003ed8 <__sfp+0x64>
 8003ea2:	4b16      	ldr	r3, [pc, #88]	; (8003efc <__sfp+0x88>)
 8003ea4:	60e3      	str	r3, [r4, #12]
 8003ea6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003eaa:	6665      	str	r5, [r4, #100]	; 0x64
 8003eac:	f000 f847 	bl	8003f3e <__retarget_lock_init_recursive>
 8003eb0:	f7ff ff96 	bl	8003de0 <__sfp_lock_release>
 8003eb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003eb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ebc:	6025      	str	r5, [r4, #0]
 8003ebe:	61a5      	str	r5, [r4, #24]
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ec8:	f7ff ff24 	bl	8003d14 <memset>
 8003ecc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ed0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ed8:	3468      	adds	r4, #104	; 0x68
 8003eda:	e7d9      	b.n	8003e90 <__sfp+0x1c>
 8003edc:	2104      	movs	r1, #4
 8003ede:	4638      	mov	r0, r7
 8003ee0:	f7ff ff62 	bl	8003da8 <__sfmoreglue>
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	6030      	str	r0, [r6, #0]
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	d1d5      	bne.n	8003e98 <__sfp+0x24>
 8003eec:	f7ff ff78 	bl	8003de0 <__sfp_lock_release>
 8003ef0:	230c      	movs	r3, #12
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	e7ee      	b.n	8003ed4 <__sfp+0x60>
 8003ef6:	bf00      	nop
 8003ef8:	08004cb8 	.word	0x08004cb8
 8003efc:	ffff0001 	.word	0xffff0001

08003f00 <_fwalk_reent>:
 8003f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f04:	4606      	mov	r6, r0
 8003f06:	4688      	mov	r8, r1
 8003f08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f0c:	2700      	movs	r7, #0
 8003f0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f12:	f1b9 0901 	subs.w	r9, r9, #1
 8003f16:	d505      	bpl.n	8003f24 <_fwalk_reent+0x24>
 8003f18:	6824      	ldr	r4, [r4, #0]
 8003f1a:	2c00      	cmp	r4, #0
 8003f1c:	d1f7      	bne.n	8003f0e <_fwalk_reent+0xe>
 8003f1e:	4638      	mov	r0, r7
 8003f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f24:	89ab      	ldrh	r3, [r5, #12]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d907      	bls.n	8003f3a <_fwalk_reent+0x3a>
 8003f2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	d003      	beq.n	8003f3a <_fwalk_reent+0x3a>
 8003f32:	4629      	mov	r1, r5
 8003f34:	4630      	mov	r0, r6
 8003f36:	47c0      	blx	r8
 8003f38:	4307      	orrs	r7, r0
 8003f3a:	3568      	adds	r5, #104	; 0x68
 8003f3c:	e7e9      	b.n	8003f12 <_fwalk_reent+0x12>

08003f3e <__retarget_lock_init_recursive>:
 8003f3e:	4770      	bx	lr

08003f40 <__retarget_lock_acquire_recursive>:
 8003f40:	4770      	bx	lr

08003f42 <__retarget_lock_release_recursive>:
 8003f42:	4770      	bx	lr

08003f44 <sbrk_aligned>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	4e0e      	ldr	r6, [pc, #56]	; (8003f80 <sbrk_aligned+0x3c>)
 8003f48:	460c      	mov	r4, r1
 8003f4a:	6831      	ldr	r1, [r6, #0]
 8003f4c:	4605      	mov	r5, r0
 8003f4e:	b911      	cbnz	r1, 8003f56 <sbrk_aligned+0x12>
 8003f50:	f000 fb7a 	bl	8004648 <_sbrk_r>
 8003f54:	6030      	str	r0, [r6, #0]
 8003f56:	4621      	mov	r1, r4
 8003f58:	4628      	mov	r0, r5
 8003f5a:	f000 fb75 	bl	8004648 <_sbrk_r>
 8003f5e:	1c43      	adds	r3, r0, #1
 8003f60:	d00a      	beq.n	8003f78 <sbrk_aligned+0x34>
 8003f62:	1cc4      	adds	r4, r0, #3
 8003f64:	f024 0403 	bic.w	r4, r4, #3
 8003f68:	42a0      	cmp	r0, r4
 8003f6a:	d007      	beq.n	8003f7c <sbrk_aligned+0x38>
 8003f6c:	1a21      	subs	r1, r4, r0
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f000 fb6a 	bl	8004648 <_sbrk_r>
 8003f74:	3001      	adds	r0, #1
 8003f76:	d101      	bne.n	8003f7c <sbrk_aligned+0x38>
 8003f78:	f04f 34ff 	mov.w	r4, #4294967295
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	20000924 	.word	0x20000924

08003f84 <_malloc_r>:
 8003f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f88:	1ccd      	adds	r5, r1, #3
 8003f8a:	f025 0503 	bic.w	r5, r5, #3
 8003f8e:	3508      	adds	r5, #8
 8003f90:	2d0c      	cmp	r5, #12
 8003f92:	bf38      	it	cc
 8003f94:	250c      	movcc	r5, #12
 8003f96:	2d00      	cmp	r5, #0
 8003f98:	4607      	mov	r7, r0
 8003f9a:	db01      	blt.n	8003fa0 <_malloc_r+0x1c>
 8003f9c:	42a9      	cmp	r1, r5
 8003f9e:	d905      	bls.n	8003fac <_malloc_r+0x28>
 8003fa0:	230c      	movs	r3, #12
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	2600      	movs	r6, #0
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fac:	4e2e      	ldr	r6, [pc, #184]	; (8004068 <_malloc_r+0xe4>)
 8003fae:	f000 fdbb 	bl	8004b28 <__malloc_lock>
 8003fb2:	6833      	ldr	r3, [r6, #0]
 8003fb4:	461c      	mov	r4, r3
 8003fb6:	bb34      	cbnz	r4, 8004006 <_malloc_r+0x82>
 8003fb8:	4629      	mov	r1, r5
 8003fba:	4638      	mov	r0, r7
 8003fbc:	f7ff ffc2 	bl	8003f44 <sbrk_aligned>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	d14d      	bne.n	8004062 <_malloc_r+0xde>
 8003fc6:	6834      	ldr	r4, [r6, #0]
 8003fc8:	4626      	mov	r6, r4
 8003fca:	2e00      	cmp	r6, #0
 8003fcc:	d140      	bne.n	8004050 <_malloc_r+0xcc>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	4631      	mov	r1, r6
 8003fd2:	4638      	mov	r0, r7
 8003fd4:	eb04 0803 	add.w	r8, r4, r3
 8003fd8:	f000 fb36 	bl	8004648 <_sbrk_r>
 8003fdc:	4580      	cmp	r8, r0
 8003fde:	d13a      	bne.n	8004056 <_malloc_r+0xd2>
 8003fe0:	6821      	ldr	r1, [r4, #0]
 8003fe2:	3503      	adds	r5, #3
 8003fe4:	1a6d      	subs	r5, r5, r1
 8003fe6:	f025 0503 	bic.w	r5, r5, #3
 8003fea:	3508      	adds	r5, #8
 8003fec:	2d0c      	cmp	r5, #12
 8003fee:	bf38      	it	cc
 8003ff0:	250c      	movcc	r5, #12
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	4638      	mov	r0, r7
 8003ff6:	f7ff ffa5 	bl	8003f44 <sbrk_aligned>
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d02b      	beq.n	8004056 <_malloc_r+0xd2>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	442b      	add	r3, r5
 8004002:	6023      	str	r3, [r4, #0]
 8004004:	e00e      	b.n	8004024 <_malloc_r+0xa0>
 8004006:	6822      	ldr	r2, [r4, #0]
 8004008:	1b52      	subs	r2, r2, r5
 800400a:	d41e      	bmi.n	800404a <_malloc_r+0xc6>
 800400c:	2a0b      	cmp	r2, #11
 800400e:	d916      	bls.n	800403e <_malloc_r+0xba>
 8004010:	1961      	adds	r1, r4, r5
 8004012:	42a3      	cmp	r3, r4
 8004014:	6025      	str	r5, [r4, #0]
 8004016:	bf18      	it	ne
 8004018:	6059      	strne	r1, [r3, #4]
 800401a:	6863      	ldr	r3, [r4, #4]
 800401c:	bf08      	it	eq
 800401e:	6031      	streq	r1, [r6, #0]
 8004020:	5162      	str	r2, [r4, r5]
 8004022:	604b      	str	r3, [r1, #4]
 8004024:	4638      	mov	r0, r7
 8004026:	f104 060b 	add.w	r6, r4, #11
 800402a:	f000 fd83 	bl	8004b34 <__malloc_unlock>
 800402e:	f026 0607 	bic.w	r6, r6, #7
 8004032:	1d23      	adds	r3, r4, #4
 8004034:	1af2      	subs	r2, r6, r3
 8004036:	d0b6      	beq.n	8003fa6 <_malloc_r+0x22>
 8004038:	1b9b      	subs	r3, r3, r6
 800403a:	50a3      	str	r3, [r4, r2]
 800403c:	e7b3      	b.n	8003fa6 <_malloc_r+0x22>
 800403e:	6862      	ldr	r2, [r4, #4]
 8004040:	42a3      	cmp	r3, r4
 8004042:	bf0c      	ite	eq
 8004044:	6032      	streq	r2, [r6, #0]
 8004046:	605a      	strne	r2, [r3, #4]
 8004048:	e7ec      	b.n	8004024 <_malloc_r+0xa0>
 800404a:	4623      	mov	r3, r4
 800404c:	6864      	ldr	r4, [r4, #4]
 800404e:	e7b2      	b.n	8003fb6 <_malloc_r+0x32>
 8004050:	4634      	mov	r4, r6
 8004052:	6876      	ldr	r6, [r6, #4]
 8004054:	e7b9      	b.n	8003fca <_malloc_r+0x46>
 8004056:	230c      	movs	r3, #12
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	4638      	mov	r0, r7
 800405c:	f000 fd6a 	bl	8004b34 <__malloc_unlock>
 8004060:	e7a1      	b.n	8003fa6 <_malloc_r+0x22>
 8004062:	6025      	str	r5, [r4, #0]
 8004064:	e7de      	b.n	8004024 <_malloc_r+0xa0>
 8004066:	bf00      	nop
 8004068:	20000920 	.word	0x20000920

0800406c <__sfputc_r>:
 800406c:	6893      	ldr	r3, [r2, #8]
 800406e:	3b01      	subs	r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	b410      	push	{r4}
 8004074:	6093      	str	r3, [r2, #8]
 8004076:	da08      	bge.n	800408a <__sfputc_r+0x1e>
 8004078:	6994      	ldr	r4, [r2, #24]
 800407a:	42a3      	cmp	r3, r4
 800407c:	db01      	blt.n	8004082 <__sfputc_r+0x16>
 800407e:	290a      	cmp	r1, #10
 8004080:	d103      	bne.n	800408a <__sfputc_r+0x1e>
 8004082:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004086:	f000 bb33 	b.w	80046f0 <__swbuf_r>
 800408a:	6813      	ldr	r3, [r2, #0]
 800408c:	1c58      	adds	r0, r3, #1
 800408e:	6010      	str	r0, [r2, #0]
 8004090:	7019      	strb	r1, [r3, #0]
 8004092:	4608      	mov	r0, r1
 8004094:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004098:	4770      	bx	lr

0800409a <__sfputs_r>:
 800409a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409c:	4606      	mov	r6, r0
 800409e:	460f      	mov	r7, r1
 80040a0:	4614      	mov	r4, r2
 80040a2:	18d5      	adds	r5, r2, r3
 80040a4:	42ac      	cmp	r4, r5
 80040a6:	d101      	bne.n	80040ac <__sfputs_r+0x12>
 80040a8:	2000      	movs	r0, #0
 80040aa:	e007      	b.n	80040bc <__sfputs_r+0x22>
 80040ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040b0:	463a      	mov	r2, r7
 80040b2:	4630      	mov	r0, r6
 80040b4:	f7ff ffda 	bl	800406c <__sfputc_r>
 80040b8:	1c43      	adds	r3, r0, #1
 80040ba:	d1f3      	bne.n	80040a4 <__sfputs_r+0xa>
 80040bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080040c0 <_vfiprintf_r>:
 80040c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c4:	460d      	mov	r5, r1
 80040c6:	b09d      	sub	sp, #116	; 0x74
 80040c8:	4614      	mov	r4, r2
 80040ca:	4698      	mov	r8, r3
 80040cc:	4606      	mov	r6, r0
 80040ce:	b118      	cbz	r0, 80040d8 <_vfiprintf_r+0x18>
 80040d0:	6983      	ldr	r3, [r0, #24]
 80040d2:	b90b      	cbnz	r3, 80040d8 <_vfiprintf_r+0x18>
 80040d4:	f7ff fe96 	bl	8003e04 <__sinit>
 80040d8:	4b89      	ldr	r3, [pc, #548]	; (8004300 <_vfiprintf_r+0x240>)
 80040da:	429d      	cmp	r5, r3
 80040dc:	d11b      	bne.n	8004116 <_vfiprintf_r+0x56>
 80040de:	6875      	ldr	r5, [r6, #4]
 80040e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040e2:	07d9      	lsls	r1, r3, #31
 80040e4:	d405      	bmi.n	80040f2 <_vfiprintf_r+0x32>
 80040e6:	89ab      	ldrh	r3, [r5, #12]
 80040e8:	059a      	lsls	r2, r3, #22
 80040ea:	d402      	bmi.n	80040f2 <_vfiprintf_r+0x32>
 80040ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80040ee:	f7ff ff27 	bl	8003f40 <__retarget_lock_acquire_recursive>
 80040f2:	89ab      	ldrh	r3, [r5, #12]
 80040f4:	071b      	lsls	r3, r3, #28
 80040f6:	d501      	bpl.n	80040fc <_vfiprintf_r+0x3c>
 80040f8:	692b      	ldr	r3, [r5, #16]
 80040fa:	b9eb      	cbnz	r3, 8004138 <_vfiprintf_r+0x78>
 80040fc:	4629      	mov	r1, r5
 80040fe:	4630      	mov	r0, r6
 8004100:	f000 fb5a 	bl	80047b8 <__swsetup_r>
 8004104:	b1c0      	cbz	r0, 8004138 <_vfiprintf_r+0x78>
 8004106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004108:	07dc      	lsls	r4, r3, #31
 800410a:	d50e      	bpl.n	800412a <_vfiprintf_r+0x6a>
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	b01d      	add	sp, #116	; 0x74
 8004112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004116:	4b7b      	ldr	r3, [pc, #492]	; (8004304 <_vfiprintf_r+0x244>)
 8004118:	429d      	cmp	r5, r3
 800411a:	d101      	bne.n	8004120 <_vfiprintf_r+0x60>
 800411c:	68b5      	ldr	r5, [r6, #8]
 800411e:	e7df      	b.n	80040e0 <_vfiprintf_r+0x20>
 8004120:	4b79      	ldr	r3, [pc, #484]	; (8004308 <_vfiprintf_r+0x248>)
 8004122:	429d      	cmp	r5, r3
 8004124:	bf08      	it	eq
 8004126:	68f5      	ldreq	r5, [r6, #12]
 8004128:	e7da      	b.n	80040e0 <_vfiprintf_r+0x20>
 800412a:	89ab      	ldrh	r3, [r5, #12]
 800412c:	0598      	lsls	r0, r3, #22
 800412e:	d4ed      	bmi.n	800410c <_vfiprintf_r+0x4c>
 8004130:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004132:	f7ff ff06 	bl	8003f42 <__retarget_lock_release_recursive>
 8004136:	e7e9      	b.n	800410c <_vfiprintf_r+0x4c>
 8004138:	2300      	movs	r3, #0
 800413a:	9309      	str	r3, [sp, #36]	; 0x24
 800413c:	2320      	movs	r3, #32
 800413e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004142:	f8cd 800c 	str.w	r8, [sp, #12]
 8004146:	2330      	movs	r3, #48	; 0x30
 8004148:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800430c <_vfiprintf_r+0x24c>
 800414c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004150:	f04f 0901 	mov.w	r9, #1
 8004154:	4623      	mov	r3, r4
 8004156:	469a      	mov	sl, r3
 8004158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800415c:	b10a      	cbz	r2, 8004162 <_vfiprintf_r+0xa2>
 800415e:	2a25      	cmp	r2, #37	; 0x25
 8004160:	d1f9      	bne.n	8004156 <_vfiprintf_r+0x96>
 8004162:	ebba 0b04 	subs.w	fp, sl, r4
 8004166:	d00b      	beq.n	8004180 <_vfiprintf_r+0xc0>
 8004168:	465b      	mov	r3, fp
 800416a:	4622      	mov	r2, r4
 800416c:	4629      	mov	r1, r5
 800416e:	4630      	mov	r0, r6
 8004170:	f7ff ff93 	bl	800409a <__sfputs_r>
 8004174:	3001      	adds	r0, #1
 8004176:	f000 80aa 	beq.w	80042ce <_vfiprintf_r+0x20e>
 800417a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800417c:	445a      	add	r2, fp
 800417e:	9209      	str	r2, [sp, #36]	; 0x24
 8004180:	f89a 3000 	ldrb.w	r3, [sl]
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 80a2 	beq.w	80042ce <_vfiprintf_r+0x20e>
 800418a:	2300      	movs	r3, #0
 800418c:	f04f 32ff 	mov.w	r2, #4294967295
 8004190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004194:	f10a 0a01 	add.w	sl, sl, #1
 8004198:	9304      	str	r3, [sp, #16]
 800419a:	9307      	str	r3, [sp, #28]
 800419c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041a0:	931a      	str	r3, [sp, #104]	; 0x68
 80041a2:	4654      	mov	r4, sl
 80041a4:	2205      	movs	r2, #5
 80041a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041aa:	4858      	ldr	r0, [pc, #352]	; (800430c <_vfiprintf_r+0x24c>)
 80041ac:	f7fc f8f0 	bl	8000390 <memchr>
 80041b0:	9a04      	ldr	r2, [sp, #16]
 80041b2:	b9d8      	cbnz	r0, 80041ec <_vfiprintf_r+0x12c>
 80041b4:	06d1      	lsls	r1, r2, #27
 80041b6:	bf44      	itt	mi
 80041b8:	2320      	movmi	r3, #32
 80041ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041be:	0713      	lsls	r3, r2, #28
 80041c0:	bf44      	itt	mi
 80041c2:	232b      	movmi	r3, #43	; 0x2b
 80041c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041c8:	f89a 3000 	ldrb.w	r3, [sl]
 80041cc:	2b2a      	cmp	r3, #42	; 0x2a
 80041ce:	d015      	beq.n	80041fc <_vfiprintf_r+0x13c>
 80041d0:	9a07      	ldr	r2, [sp, #28]
 80041d2:	4654      	mov	r4, sl
 80041d4:	2000      	movs	r0, #0
 80041d6:	f04f 0c0a 	mov.w	ip, #10
 80041da:	4621      	mov	r1, r4
 80041dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041e0:	3b30      	subs	r3, #48	; 0x30
 80041e2:	2b09      	cmp	r3, #9
 80041e4:	d94e      	bls.n	8004284 <_vfiprintf_r+0x1c4>
 80041e6:	b1b0      	cbz	r0, 8004216 <_vfiprintf_r+0x156>
 80041e8:	9207      	str	r2, [sp, #28]
 80041ea:	e014      	b.n	8004216 <_vfiprintf_r+0x156>
 80041ec:	eba0 0308 	sub.w	r3, r0, r8
 80041f0:	fa09 f303 	lsl.w	r3, r9, r3
 80041f4:	4313      	orrs	r3, r2
 80041f6:	9304      	str	r3, [sp, #16]
 80041f8:	46a2      	mov	sl, r4
 80041fa:	e7d2      	b.n	80041a2 <_vfiprintf_r+0xe2>
 80041fc:	9b03      	ldr	r3, [sp, #12]
 80041fe:	1d19      	adds	r1, r3, #4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	9103      	str	r1, [sp, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	bfbb      	ittet	lt
 8004208:	425b      	neglt	r3, r3
 800420a:	f042 0202 	orrlt.w	r2, r2, #2
 800420e:	9307      	strge	r3, [sp, #28]
 8004210:	9307      	strlt	r3, [sp, #28]
 8004212:	bfb8      	it	lt
 8004214:	9204      	strlt	r2, [sp, #16]
 8004216:	7823      	ldrb	r3, [r4, #0]
 8004218:	2b2e      	cmp	r3, #46	; 0x2e
 800421a:	d10c      	bne.n	8004236 <_vfiprintf_r+0x176>
 800421c:	7863      	ldrb	r3, [r4, #1]
 800421e:	2b2a      	cmp	r3, #42	; 0x2a
 8004220:	d135      	bne.n	800428e <_vfiprintf_r+0x1ce>
 8004222:	9b03      	ldr	r3, [sp, #12]
 8004224:	1d1a      	adds	r2, r3, #4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	9203      	str	r2, [sp, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	bfb8      	it	lt
 800422e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004232:	3402      	adds	r4, #2
 8004234:	9305      	str	r3, [sp, #20]
 8004236:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800431c <_vfiprintf_r+0x25c>
 800423a:	7821      	ldrb	r1, [r4, #0]
 800423c:	2203      	movs	r2, #3
 800423e:	4650      	mov	r0, sl
 8004240:	f7fc f8a6 	bl	8000390 <memchr>
 8004244:	b140      	cbz	r0, 8004258 <_vfiprintf_r+0x198>
 8004246:	2340      	movs	r3, #64	; 0x40
 8004248:	eba0 000a 	sub.w	r0, r0, sl
 800424c:	fa03 f000 	lsl.w	r0, r3, r0
 8004250:	9b04      	ldr	r3, [sp, #16]
 8004252:	4303      	orrs	r3, r0
 8004254:	3401      	adds	r4, #1
 8004256:	9304      	str	r3, [sp, #16]
 8004258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800425c:	482c      	ldr	r0, [pc, #176]	; (8004310 <_vfiprintf_r+0x250>)
 800425e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004262:	2206      	movs	r2, #6
 8004264:	f7fc f894 	bl	8000390 <memchr>
 8004268:	2800      	cmp	r0, #0
 800426a:	d03f      	beq.n	80042ec <_vfiprintf_r+0x22c>
 800426c:	4b29      	ldr	r3, [pc, #164]	; (8004314 <_vfiprintf_r+0x254>)
 800426e:	bb1b      	cbnz	r3, 80042b8 <_vfiprintf_r+0x1f8>
 8004270:	9b03      	ldr	r3, [sp, #12]
 8004272:	3307      	adds	r3, #7
 8004274:	f023 0307 	bic.w	r3, r3, #7
 8004278:	3308      	adds	r3, #8
 800427a:	9303      	str	r3, [sp, #12]
 800427c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800427e:	443b      	add	r3, r7
 8004280:	9309      	str	r3, [sp, #36]	; 0x24
 8004282:	e767      	b.n	8004154 <_vfiprintf_r+0x94>
 8004284:	fb0c 3202 	mla	r2, ip, r2, r3
 8004288:	460c      	mov	r4, r1
 800428a:	2001      	movs	r0, #1
 800428c:	e7a5      	b.n	80041da <_vfiprintf_r+0x11a>
 800428e:	2300      	movs	r3, #0
 8004290:	3401      	adds	r4, #1
 8004292:	9305      	str	r3, [sp, #20]
 8004294:	4619      	mov	r1, r3
 8004296:	f04f 0c0a 	mov.w	ip, #10
 800429a:	4620      	mov	r0, r4
 800429c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042a0:	3a30      	subs	r2, #48	; 0x30
 80042a2:	2a09      	cmp	r2, #9
 80042a4:	d903      	bls.n	80042ae <_vfiprintf_r+0x1ee>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0c5      	beq.n	8004236 <_vfiprintf_r+0x176>
 80042aa:	9105      	str	r1, [sp, #20]
 80042ac:	e7c3      	b.n	8004236 <_vfiprintf_r+0x176>
 80042ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80042b2:	4604      	mov	r4, r0
 80042b4:	2301      	movs	r3, #1
 80042b6:	e7f0      	b.n	800429a <_vfiprintf_r+0x1da>
 80042b8:	ab03      	add	r3, sp, #12
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	462a      	mov	r2, r5
 80042be:	4b16      	ldr	r3, [pc, #88]	; (8004318 <_vfiprintf_r+0x258>)
 80042c0:	a904      	add	r1, sp, #16
 80042c2:	4630      	mov	r0, r6
 80042c4:	f3af 8000 	nop.w
 80042c8:	4607      	mov	r7, r0
 80042ca:	1c78      	adds	r0, r7, #1
 80042cc:	d1d6      	bne.n	800427c <_vfiprintf_r+0x1bc>
 80042ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042d0:	07d9      	lsls	r1, r3, #31
 80042d2:	d405      	bmi.n	80042e0 <_vfiprintf_r+0x220>
 80042d4:	89ab      	ldrh	r3, [r5, #12]
 80042d6:	059a      	lsls	r2, r3, #22
 80042d8:	d402      	bmi.n	80042e0 <_vfiprintf_r+0x220>
 80042da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042dc:	f7ff fe31 	bl	8003f42 <__retarget_lock_release_recursive>
 80042e0:	89ab      	ldrh	r3, [r5, #12]
 80042e2:	065b      	lsls	r3, r3, #25
 80042e4:	f53f af12 	bmi.w	800410c <_vfiprintf_r+0x4c>
 80042e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042ea:	e711      	b.n	8004110 <_vfiprintf_r+0x50>
 80042ec:	ab03      	add	r3, sp, #12
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	462a      	mov	r2, r5
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <_vfiprintf_r+0x258>)
 80042f4:	a904      	add	r1, sp, #16
 80042f6:	4630      	mov	r0, r6
 80042f8:	f000 f880 	bl	80043fc <_printf_i>
 80042fc:	e7e4      	b.n	80042c8 <_vfiprintf_r+0x208>
 80042fe:	bf00      	nop
 8004300:	08004cdc 	.word	0x08004cdc
 8004304:	08004cfc 	.word	0x08004cfc
 8004308:	08004cbc 	.word	0x08004cbc
 800430c:	08004d1c 	.word	0x08004d1c
 8004310:	08004d26 	.word	0x08004d26
 8004314:	00000000 	.word	0x00000000
 8004318:	0800409b 	.word	0x0800409b
 800431c:	08004d22 	.word	0x08004d22

08004320 <_printf_common>:
 8004320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004324:	4616      	mov	r6, r2
 8004326:	4699      	mov	r9, r3
 8004328:	688a      	ldr	r2, [r1, #8]
 800432a:	690b      	ldr	r3, [r1, #16]
 800432c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004330:	4293      	cmp	r3, r2
 8004332:	bfb8      	it	lt
 8004334:	4613      	movlt	r3, r2
 8004336:	6033      	str	r3, [r6, #0]
 8004338:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800433c:	4607      	mov	r7, r0
 800433e:	460c      	mov	r4, r1
 8004340:	b10a      	cbz	r2, 8004346 <_printf_common+0x26>
 8004342:	3301      	adds	r3, #1
 8004344:	6033      	str	r3, [r6, #0]
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	0699      	lsls	r1, r3, #26
 800434a:	bf42      	ittt	mi
 800434c:	6833      	ldrmi	r3, [r6, #0]
 800434e:	3302      	addmi	r3, #2
 8004350:	6033      	strmi	r3, [r6, #0]
 8004352:	6825      	ldr	r5, [r4, #0]
 8004354:	f015 0506 	ands.w	r5, r5, #6
 8004358:	d106      	bne.n	8004368 <_printf_common+0x48>
 800435a:	f104 0a19 	add.w	sl, r4, #25
 800435e:	68e3      	ldr	r3, [r4, #12]
 8004360:	6832      	ldr	r2, [r6, #0]
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	42ab      	cmp	r3, r5
 8004366:	dc26      	bgt.n	80043b6 <_printf_common+0x96>
 8004368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800436c:	1e13      	subs	r3, r2, #0
 800436e:	6822      	ldr	r2, [r4, #0]
 8004370:	bf18      	it	ne
 8004372:	2301      	movne	r3, #1
 8004374:	0692      	lsls	r2, r2, #26
 8004376:	d42b      	bmi.n	80043d0 <_printf_common+0xb0>
 8004378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800437c:	4649      	mov	r1, r9
 800437e:	4638      	mov	r0, r7
 8004380:	47c0      	blx	r8
 8004382:	3001      	adds	r0, #1
 8004384:	d01e      	beq.n	80043c4 <_printf_common+0xa4>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	68e5      	ldr	r5, [r4, #12]
 800438a:	6832      	ldr	r2, [r6, #0]
 800438c:	f003 0306 	and.w	r3, r3, #6
 8004390:	2b04      	cmp	r3, #4
 8004392:	bf08      	it	eq
 8004394:	1aad      	subeq	r5, r5, r2
 8004396:	68a3      	ldr	r3, [r4, #8]
 8004398:	6922      	ldr	r2, [r4, #16]
 800439a:	bf0c      	ite	eq
 800439c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043a0:	2500      	movne	r5, #0
 80043a2:	4293      	cmp	r3, r2
 80043a4:	bfc4      	itt	gt
 80043a6:	1a9b      	subgt	r3, r3, r2
 80043a8:	18ed      	addgt	r5, r5, r3
 80043aa:	2600      	movs	r6, #0
 80043ac:	341a      	adds	r4, #26
 80043ae:	42b5      	cmp	r5, r6
 80043b0:	d11a      	bne.n	80043e8 <_printf_common+0xc8>
 80043b2:	2000      	movs	r0, #0
 80043b4:	e008      	b.n	80043c8 <_printf_common+0xa8>
 80043b6:	2301      	movs	r3, #1
 80043b8:	4652      	mov	r2, sl
 80043ba:	4649      	mov	r1, r9
 80043bc:	4638      	mov	r0, r7
 80043be:	47c0      	blx	r8
 80043c0:	3001      	adds	r0, #1
 80043c2:	d103      	bne.n	80043cc <_printf_common+0xac>
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295
 80043c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043cc:	3501      	adds	r5, #1
 80043ce:	e7c6      	b.n	800435e <_printf_common+0x3e>
 80043d0:	18e1      	adds	r1, r4, r3
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	2030      	movs	r0, #48	; 0x30
 80043d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043da:	4422      	add	r2, r4
 80043dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043e4:	3302      	adds	r3, #2
 80043e6:	e7c7      	b.n	8004378 <_printf_common+0x58>
 80043e8:	2301      	movs	r3, #1
 80043ea:	4622      	mov	r2, r4
 80043ec:	4649      	mov	r1, r9
 80043ee:	4638      	mov	r0, r7
 80043f0:	47c0      	blx	r8
 80043f2:	3001      	adds	r0, #1
 80043f4:	d0e6      	beq.n	80043c4 <_printf_common+0xa4>
 80043f6:	3601      	adds	r6, #1
 80043f8:	e7d9      	b.n	80043ae <_printf_common+0x8e>
	...

080043fc <_printf_i>:
 80043fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004400:	7e0f      	ldrb	r7, [r1, #24]
 8004402:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004404:	2f78      	cmp	r7, #120	; 0x78
 8004406:	4691      	mov	r9, r2
 8004408:	4680      	mov	r8, r0
 800440a:	460c      	mov	r4, r1
 800440c:	469a      	mov	sl, r3
 800440e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004412:	d807      	bhi.n	8004424 <_printf_i+0x28>
 8004414:	2f62      	cmp	r7, #98	; 0x62
 8004416:	d80a      	bhi.n	800442e <_printf_i+0x32>
 8004418:	2f00      	cmp	r7, #0
 800441a:	f000 80d8 	beq.w	80045ce <_printf_i+0x1d2>
 800441e:	2f58      	cmp	r7, #88	; 0x58
 8004420:	f000 80a3 	beq.w	800456a <_printf_i+0x16e>
 8004424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800442c:	e03a      	b.n	80044a4 <_printf_i+0xa8>
 800442e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004432:	2b15      	cmp	r3, #21
 8004434:	d8f6      	bhi.n	8004424 <_printf_i+0x28>
 8004436:	a101      	add	r1, pc, #4	; (adr r1, 800443c <_printf_i+0x40>)
 8004438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800443c:	08004495 	.word	0x08004495
 8004440:	080044a9 	.word	0x080044a9
 8004444:	08004425 	.word	0x08004425
 8004448:	08004425 	.word	0x08004425
 800444c:	08004425 	.word	0x08004425
 8004450:	08004425 	.word	0x08004425
 8004454:	080044a9 	.word	0x080044a9
 8004458:	08004425 	.word	0x08004425
 800445c:	08004425 	.word	0x08004425
 8004460:	08004425 	.word	0x08004425
 8004464:	08004425 	.word	0x08004425
 8004468:	080045b5 	.word	0x080045b5
 800446c:	080044d9 	.word	0x080044d9
 8004470:	08004597 	.word	0x08004597
 8004474:	08004425 	.word	0x08004425
 8004478:	08004425 	.word	0x08004425
 800447c:	080045d7 	.word	0x080045d7
 8004480:	08004425 	.word	0x08004425
 8004484:	080044d9 	.word	0x080044d9
 8004488:	08004425 	.word	0x08004425
 800448c:	08004425 	.word	0x08004425
 8004490:	0800459f 	.word	0x0800459f
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	1d1a      	adds	r2, r3, #4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	602a      	str	r2, [r5, #0]
 800449c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0a3      	b.n	80045f0 <_printf_i+0x1f4>
 80044a8:	6820      	ldr	r0, [r4, #0]
 80044aa:	6829      	ldr	r1, [r5, #0]
 80044ac:	0606      	lsls	r6, r0, #24
 80044ae:	f101 0304 	add.w	r3, r1, #4
 80044b2:	d50a      	bpl.n	80044ca <_printf_i+0xce>
 80044b4:	680e      	ldr	r6, [r1, #0]
 80044b6:	602b      	str	r3, [r5, #0]
 80044b8:	2e00      	cmp	r6, #0
 80044ba:	da03      	bge.n	80044c4 <_printf_i+0xc8>
 80044bc:	232d      	movs	r3, #45	; 0x2d
 80044be:	4276      	negs	r6, r6
 80044c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c4:	485e      	ldr	r0, [pc, #376]	; (8004640 <_printf_i+0x244>)
 80044c6:	230a      	movs	r3, #10
 80044c8:	e019      	b.n	80044fe <_printf_i+0x102>
 80044ca:	680e      	ldr	r6, [r1, #0]
 80044cc:	602b      	str	r3, [r5, #0]
 80044ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044d2:	bf18      	it	ne
 80044d4:	b236      	sxthne	r6, r6
 80044d6:	e7ef      	b.n	80044b8 <_printf_i+0xbc>
 80044d8:	682b      	ldr	r3, [r5, #0]
 80044da:	6820      	ldr	r0, [r4, #0]
 80044dc:	1d19      	adds	r1, r3, #4
 80044de:	6029      	str	r1, [r5, #0]
 80044e0:	0601      	lsls	r1, r0, #24
 80044e2:	d501      	bpl.n	80044e8 <_printf_i+0xec>
 80044e4:	681e      	ldr	r6, [r3, #0]
 80044e6:	e002      	b.n	80044ee <_printf_i+0xf2>
 80044e8:	0646      	lsls	r6, r0, #25
 80044ea:	d5fb      	bpl.n	80044e4 <_printf_i+0xe8>
 80044ec:	881e      	ldrh	r6, [r3, #0]
 80044ee:	4854      	ldr	r0, [pc, #336]	; (8004640 <_printf_i+0x244>)
 80044f0:	2f6f      	cmp	r7, #111	; 0x6f
 80044f2:	bf0c      	ite	eq
 80044f4:	2308      	moveq	r3, #8
 80044f6:	230a      	movne	r3, #10
 80044f8:	2100      	movs	r1, #0
 80044fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044fe:	6865      	ldr	r5, [r4, #4]
 8004500:	60a5      	str	r5, [r4, #8]
 8004502:	2d00      	cmp	r5, #0
 8004504:	bfa2      	ittt	ge
 8004506:	6821      	ldrge	r1, [r4, #0]
 8004508:	f021 0104 	bicge.w	r1, r1, #4
 800450c:	6021      	strge	r1, [r4, #0]
 800450e:	b90e      	cbnz	r6, 8004514 <_printf_i+0x118>
 8004510:	2d00      	cmp	r5, #0
 8004512:	d04d      	beq.n	80045b0 <_printf_i+0x1b4>
 8004514:	4615      	mov	r5, r2
 8004516:	fbb6 f1f3 	udiv	r1, r6, r3
 800451a:	fb03 6711 	mls	r7, r3, r1, r6
 800451e:	5dc7      	ldrb	r7, [r0, r7]
 8004520:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004524:	4637      	mov	r7, r6
 8004526:	42bb      	cmp	r3, r7
 8004528:	460e      	mov	r6, r1
 800452a:	d9f4      	bls.n	8004516 <_printf_i+0x11a>
 800452c:	2b08      	cmp	r3, #8
 800452e:	d10b      	bne.n	8004548 <_printf_i+0x14c>
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	07de      	lsls	r6, r3, #31
 8004534:	d508      	bpl.n	8004548 <_printf_i+0x14c>
 8004536:	6923      	ldr	r3, [r4, #16]
 8004538:	6861      	ldr	r1, [r4, #4]
 800453a:	4299      	cmp	r1, r3
 800453c:	bfde      	ittt	le
 800453e:	2330      	movle	r3, #48	; 0x30
 8004540:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004544:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004548:	1b52      	subs	r2, r2, r5
 800454a:	6122      	str	r2, [r4, #16]
 800454c:	f8cd a000 	str.w	sl, [sp]
 8004550:	464b      	mov	r3, r9
 8004552:	aa03      	add	r2, sp, #12
 8004554:	4621      	mov	r1, r4
 8004556:	4640      	mov	r0, r8
 8004558:	f7ff fee2 	bl	8004320 <_printf_common>
 800455c:	3001      	adds	r0, #1
 800455e:	d14c      	bne.n	80045fa <_printf_i+0x1fe>
 8004560:	f04f 30ff 	mov.w	r0, #4294967295
 8004564:	b004      	add	sp, #16
 8004566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800456a:	4835      	ldr	r0, [pc, #212]	; (8004640 <_printf_i+0x244>)
 800456c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004570:	6829      	ldr	r1, [r5, #0]
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	f851 6b04 	ldr.w	r6, [r1], #4
 8004578:	6029      	str	r1, [r5, #0]
 800457a:	061d      	lsls	r5, r3, #24
 800457c:	d514      	bpl.n	80045a8 <_printf_i+0x1ac>
 800457e:	07df      	lsls	r7, r3, #31
 8004580:	bf44      	itt	mi
 8004582:	f043 0320 	orrmi.w	r3, r3, #32
 8004586:	6023      	strmi	r3, [r4, #0]
 8004588:	b91e      	cbnz	r6, 8004592 <_printf_i+0x196>
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	f023 0320 	bic.w	r3, r3, #32
 8004590:	6023      	str	r3, [r4, #0]
 8004592:	2310      	movs	r3, #16
 8004594:	e7b0      	b.n	80044f8 <_printf_i+0xfc>
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	f043 0320 	orr.w	r3, r3, #32
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	2378      	movs	r3, #120	; 0x78
 80045a0:	4828      	ldr	r0, [pc, #160]	; (8004644 <_printf_i+0x248>)
 80045a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045a6:	e7e3      	b.n	8004570 <_printf_i+0x174>
 80045a8:	0659      	lsls	r1, r3, #25
 80045aa:	bf48      	it	mi
 80045ac:	b2b6      	uxthmi	r6, r6
 80045ae:	e7e6      	b.n	800457e <_printf_i+0x182>
 80045b0:	4615      	mov	r5, r2
 80045b2:	e7bb      	b.n	800452c <_printf_i+0x130>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	6826      	ldr	r6, [r4, #0]
 80045b8:	6961      	ldr	r1, [r4, #20]
 80045ba:	1d18      	adds	r0, r3, #4
 80045bc:	6028      	str	r0, [r5, #0]
 80045be:	0635      	lsls	r5, r6, #24
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	d501      	bpl.n	80045c8 <_printf_i+0x1cc>
 80045c4:	6019      	str	r1, [r3, #0]
 80045c6:	e002      	b.n	80045ce <_printf_i+0x1d2>
 80045c8:	0670      	lsls	r0, r6, #25
 80045ca:	d5fb      	bpl.n	80045c4 <_printf_i+0x1c8>
 80045cc:	8019      	strh	r1, [r3, #0]
 80045ce:	2300      	movs	r3, #0
 80045d0:	6123      	str	r3, [r4, #16]
 80045d2:	4615      	mov	r5, r2
 80045d4:	e7ba      	b.n	800454c <_printf_i+0x150>
 80045d6:	682b      	ldr	r3, [r5, #0]
 80045d8:	1d1a      	adds	r2, r3, #4
 80045da:	602a      	str	r2, [r5, #0]
 80045dc:	681d      	ldr	r5, [r3, #0]
 80045de:	6862      	ldr	r2, [r4, #4]
 80045e0:	2100      	movs	r1, #0
 80045e2:	4628      	mov	r0, r5
 80045e4:	f7fb fed4 	bl	8000390 <memchr>
 80045e8:	b108      	cbz	r0, 80045ee <_printf_i+0x1f2>
 80045ea:	1b40      	subs	r0, r0, r5
 80045ec:	6060      	str	r0, [r4, #4]
 80045ee:	6863      	ldr	r3, [r4, #4]
 80045f0:	6123      	str	r3, [r4, #16]
 80045f2:	2300      	movs	r3, #0
 80045f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045f8:	e7a8      	b.n	800454c <_printf_i+0x150>
 80045fa:	6923      	ldr	r3, [r4, #16]
 80045fc:	462a      	mov	r2, r5
 80045fe:	4649      	mov	r1, r9
 8004600:	4640      	mov	r0, r8
 8004602:	47d0      	blx	sl
 8004604:	3001      	adds	r0, #1
 8004606:	d0ab      	beq.n	8004560 <_printf_i+0x164>
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	079b      	lsls	r3, r3, #30
 800460c:	d413      	bmi.n	8004636 <_printf_i+0x23a>
 800460e:	68e0      	ldr	r0, [r4, #12]
 8004610:	9b03      	ldr	r3, [sp, #12]
 8004612:	4298      	cmp	r0, r3
 8004614:	bfb8      	it	lt
 8004616:	4618      	movlt	r0, r3
 8004618:	e7a4      	b.n	8004564 <_printf_i+0x168>
 800461a:	2301      	movs	r3, #1
 800461c:	4632      	mov	r2, r6
 800461e:	4649      	mov	r1, r9
 8004620:	4640      	mov	r0, r8
 8004622:	47d0      	blx	sl
 8004624:	3001      	adds	r0, #1
 8004626:	d09b      	beq.n	8004560 <_printf_i+0x164>
 8004628:	3501      	adds	r5, #1
 800462a:	68e3      	ldr	r3, [r4, #12]
 800462c:	9903      	ldr	r1, [sp, #12]
 800462e:	1a5b      	subs	r3, r3, r1
 8004630:	42ab      	cmp	r3, r5
 8004632:	dcf2      	bgt.n	800461a <_printf_i+0x21e>
 8004634:	e7eb      	b.n	800460e <_printf_i+0x212>
 8004636:	2500      	movs	r5, #0
 8004638:	f104 0619 	add.w	r6, r4, #25
 800463c:	e7f5      	b.n	800462a <_printf_i+0x22e>
 800463e:	bf00      	nop
 8004640:	08004d2d 	.word	0x08004d2d
 8004644:	08004d3e 	.word	0x08004d3e

08004648 <_sbrk_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4d06      	ldr	r5, [pc, #24]	; (8004664 <_sbrk_r+0x1c>)
 800464c:	2300      	movs	r3, #0
 800464e:	4604      	mov	r4, r0
 8004650:	4608      	mov	r0, r1
 8004652:	602b      	str	r3, [r5, #0]
 8004654:	f7fc fff2 	bl	800163c <_sbrk>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d102      	bne.n	8004662 <_sbrk_r+0x1a>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	b103      	cbz	r3, 8004662 <_sbrk_r+0x1a>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	20000928 	.word	0x20000928

08004668 <__sread>:
 8004668:	b510      	push	{r4, lr}
 800466a:	460c      	mov	r4, r1
 800466c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004670:	f000 fab2 	bl	8004bd8 <_read_r>
 8004674:	2800      	cmp	r0, #0
 8004676:	bfab      	itete	ge
 8004678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800467a:	89a3      	ldrhlt	r3, [r4, #12]
 800467c:	181b      	addge	r3, r3, r0
 800467e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004682:	bfac      	ite	ge
 8004684:	6563      	strge	r3, [r4, #84]	; 0x54
 8004686:	81a3      	strhlt	r3, [r4, #12]
 8004688:	bd10      	pop	{r4, pc}

0800468a <__swrite>:
 800468a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468e:	461f      	mov	r7, r3
 8004690:	898b      	ldrh	r3, [r1, #12]
 8004692:	05db      	lsls	r3, r3, #23
 8004694:	4605      	mov	r5, r0
 8004696:	460c      	mov	r4, r1
 8004698:	4616      	mov	r6, r2
 800469a:	d505      	bpl.n	80046a8 <__swrite+0x1e>
 800469c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a0:	2302      	movs	r3, #2
 80046a2:	2200      	movs	r2, #0
 80046a4:	f000 f9c8 	bl	8004a38 <_lseek_r>
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046b2:	81a3      	strh	r3, [r4, #12]
 80046b4:	4632      	mov	r2, r6
 80046b6:	463b      	mov	r3, r7
 80046b8:	4628      	mov	r0, r5
 80046ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046be:	f000 b869 	b.w	8004794 <_write_r>

080046c2 <__sseek>:
 80046c2:	b510      	push	{r4, lr}
 80046c4:	460c      	mov	r4, r1
 80046c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ca:	f000 f9b5 	bl	8004a38 <_lseek_r>
 80046ce:	1c43      	adds	r3, r0, #1
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	bf15      	itete	ne
 80046d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80046d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046de:	81a3      	strheq	r3, [r4, #12]
 80046e0:	bf18      	it	ne
 80046e2:	81a3      	strhne	r3, [r4, #12]
 80046e4:	bd10      	pop	{r4, pc}

080046e6 <__sclose>:
 80046e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ea:	f000 b8d3 	b.w	8004894 <_close_r>
	...

080046f0 <__swbuf_r>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	460e      	mov	r6, r1
 80046f4:	4614      	mov	r4, r2
 80046f6:	4605      	mov	r5, r0
 80046f8:	b118      	cbz	r0, 8004702 <__swbuf_r+0x12>
 80046fa:	6983      	ldr	r3, [r0, #24]
 80046fc:	b90b      	cbnz	r3, 8004702 <__swbuf_r+0x12>
 80046fe:	f7ff fb81 	bl	8003e04 <__sinit>
 8004702:	4b21      	ldr	r3, [pc, #132]	; (8004788 <__swbuf_r+0x98>)
 8004704:	429c      	cmp	r4, r3
 8004706:	d12b      	bne.n	8004760 <__swbuf_r+0x70>
 8004708:	686c      	ldr	r4, [r5, #4]
 800470a:	69a3      	ldr	r3, [r4, #24]
 800470c:	60a3      	str	r3, [r4, #8]
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	071a      	lsls	r2, r3, #28
 8004712:	d52f      	bpl.n	8004774 <__swbuf_r+0x84>
 8004714:	6923      	ldr	r3, [r4, #16]
 8004716:	b36b      	cbz	r3, 8004774 <__swbuf_r+0x84>
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	6820      	ldr	r0, [r4, #0]
 800471c:	1ac0      	subs	r0, r0, r3
 800471e:	6963      	ldr	r3, [r4, #20]
 8004720:	b2f6      	uxtb	r6, r6
 8004722:	4283      	cmp	r3, r0
 8004724:	4637      	mov	r7, r6
 8004726:	dc04      	bgt.n	8004732 <__swbuf_r+0x42>
 8004728:	4621      	mov	r1, r4
 800472a:	4628      	mov	r0, r5
 800472c:	f000 f948 	bl	80049c0 <_fflush_r>
 8004730:	bb30      	cbnz	r0, 8004780 <__swbuf_r+0x90>
 8004732:	68a3      	ldr	r3, [r4, #8]
 8004734:	3b01      	subs	r3, #1
 8004736:	60a3      	str	r3, [r4, #8]
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	6022      	str	r2, [r4, #0]
 800473e:	701e      	strb	r6, [r3, #0]
 8004740:	6963      	ldr	r3, [r4, #20]
 8004742:	3001      	adds	r0, #1
 8004744:	4283      	cmp	r3, r0
 8004746:	d004      	beq.n	8004752 <__swbuf_r+0x62>
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	07db      	lsls	r3, r3, #31
 800474c:	d506      	bpl.n	800475c <__swbuf_r+0x6c>
 800474e:	2e0a      	cmp	r6, #10
 8004750:	d104      	bne.n	800475c <__swbuf_r+0x6c>
 8004752:	4621      	mov	r1, r4
 8004754:	4628      	mov	r0, r5
 8004756:	f000 f933 	bl	80049c0 <_fflush_r>
 800475a:	b988      	cbnz	r0, 8004780 <__swbuf_r+0x90>
 800475c:	4638      	mov	r0, r7
 800475e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004760:	4b0a      	ldr	r3, [pc, #40]	; (800478c <__swbuf_r+0x9c>)
 8004762:	429c      	cmp	r4, r3
 8004764:	d101      	bne.n	800476a <__swbuf_r+0x7a>
 8004766:	68ac      	ldr	r4, [r5, #8]
 8004768:	e7cf      	b.n	800470a <__swbuf_r+0x1a>
 800476a:	4b09      	ldr	r3, [pc, #36]	; (8004790 <__swbuf_r+0xa0>)
 800476c:	429c      	cmp	r4, r3
 800476e:	bf08      	it	eq
 8004770:	68ec      	ldreq	r4, [r5, #12]
 8004772:	e7ca      	b.n	800470a <__swbuf_r+0x1a>
 8004774:	4621      	mov	r1, r4
 8004776:	4628      	mov	r0, r5
 8004778:	f000 f81e 	bl	80047b8 <__swsetup_r>
 800477c:	2800      	cmp	r0, #0
 800477e:	d0cb      	beq.n	8004718 <__swbuf_r+0x28>
 8004780:	f04f 37ff 	mov.w	r7, #4294967295
 8004784:	e7ea      	b.n	800475c <__swbuf_r+0x6c>
 8004786:	bf00      	nop
 8004788:	08004cdc 	.word	0x08004cdc
 800478c:	08004cfc 	.word	0x08004cfc
 8004790:	08004cbc 	.word	0x08004cbc

08004794 <_write_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	4d07      	ldr	r5, [pc, #28]	; (80047b4 <_write_r+0x20>)
 8004798:	4604      	mov	r4, r0
 800479a:	4608      	mov	r0, r1
 800479c:	4611      	mov	r1, r2
 800479e:	2200      	movs	r2, #0
 80047a0:	602a      	str	r2, [r5, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	f7fc fefa 	bl	800159c <_write>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d102      	bne.n	80047b2 <_write_r+0x1e>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	b103      	cbz	r3, 80047b2 <_write_r+0x1e>
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
 80047b4:	20000928 	.word	0x20000928

080047b8 <__swsetup_r>:
 80047b8:	4b32      	ldr	r3, [pc, #200]	; (8004884 <__swsetup_r+0xcc>)
 80047ba:	b570      	push	{r4, r5, r6, lr}
 80047bc:	681d      	ldr	r5, [r3, #0]
 80047be:	4606      	mov	r6, r0
 80047c0:	460c      	mov	r4, r1
 80047c2:	b125      	cbz	r5, 80047ce <__swsetup_r+0x16>
 80047c4:	69ab      	ldr	r3, [r5, #24]
 80047c6:	b913      	cbnz	r3, 80047ce <__swsetup_r+0x16>
 80047c8:	4628      	mov	r0, r5
 80047ca:	f7ff fb1b 	bl	8003e04 <__sinit>
 80047ce:	4b2e      	ldr	r3, [pc, #184]	; (8004888 <__swsetup_r+0xd0>)
 80047d0:	429c      	cmp	r4, r3
 80047d2:	d10f      	bne.n	80047f4 <__swsetup_r+0x3c>
 80047d4:	686c      	ldr	r4, [r5, #4]
 80047d6:	89a3      	ldrh	r3, [r4, #12]
 80047d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047dc:	0719      	lsls	r1, r3, #28
 80047de:	d42c      	bmi.n	800483a <__swsetup_r+0x82>
 80047e0:	06dd      	lsls	r5, r3, #27
 80047e2:	d411      	bmi.n	8004808 <__swsetup_r+0x50>
 80047e4:	2309      	movs	r3, #9
 80047e6:	6033      	str	r3, [r6, #0]
 80047e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047ec:	81a3      	strh	r3, [r4, #12]
 80047ee:	f04f 30ff 	mov.w	r0, #4294967295
 80047f2:	e03e      	b.n	8004872 <__swsetup_r+0xba>
 80047f4:	4b25      	ldr	r3, [pc, #148]	; (800488c <__swsetup_r+0xd4>)
 80047f6:	429c      	cmp	r4, r3
 80047f8:	d101      	bne.n	80047fe <__swsetup_r+0x46>
 80047fa:	68ac      	ldr	r4, [r5, #8]
 80047fc:	e7eb      	b.n	80047d6 <__swsetup_r+0x1e>
 80047fe:	4b24      	ldr	r3, [pc, #144]	; (8004890 <__swsetup_r+0xd8>)
 8004800:	429c      	cmp	r4, r3
 8004802:	bf08      	it	eq
 8004804:	68ec      	ldreq	r4, [r5, #12]
 8004806:	e7e6      	b.n	80047d6 <__swsetup_r+0x1e>
 8004808:	0758      	lsls	r0, r3, #29
 800480a:	d512      	bpl.n	8004832 <__swsetup_r+0x7a>
 800480c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800480e:	b141      	cbz	r1, 8004822 <__swsetup_r+0x6a>
 8004810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004814:	4299      	cmp	r1, r3
 8004816:	d002      	beq.n	800481e <__swsetup_r+0x66>
 8004818:	4630      	mov	r0, r6
 800481a:	f000 f991 	bl	8004b40 <_free_r>
 800481e:	2300      	movs	r3, #0
 8004820:	6363      	str	r3, [r4, #52]	; 0x34
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004828:	81a3      	strh	r3, [r4, #12]
 800482a:	2300      	movs	r3, #0
 800482c:	6063      	str	r3, [r4, #4]
 800482e:	6923      	ldr	r3, [r4, #16]
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	f043 0308 	orr.w	r3, r3, #8
 8004838:	81a3      	strh	r3, [r4, #12]
 800483a:	6923      	ldr	r3, [r4, #16]
 800483c:	b94b      	cbnz	r3, 8004852 <__swsetup_r+0x9a>
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004848:	d003      	beq.n	8004852 <__swsetup_r+0x9a>
 800484a:	4621      	mov	r1, r4
 800484c:	4630      	mov	r0, r6
 800484e:	f000 f92b 	bl	8004aa8 <__smakebuf_r>
 8004852:	89a0      	ldrh	r0, [r4, #12]
 8004854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004858:	f010 0301 	ands.w	r3, r0, #1
 800485c:	d00a      	beq.n	8004874 <__swsetup_r+0xbc>
 800485e:	2300      	movs	r3, #0
 8004860:	60a3      	str	r3, [r4, #8]
 8004862:	6963      	ldr	r3, [r4, #20]
 8004864:	425b      	negs	r3, r3
 8004866:	61a3      	str	r3, [r4, #24]
 8004868:	6923      	ldr	r3, [r4, #16]
 800486a:	b943      	cbnz	r3, 800487e <__swsetup_r+0xc6>
 800486c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004870:	d1ba      	bne.n	80047e8 <__swsetup_r+0x30>
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	0781      	lsls	r1, r0, #30
 8004876:	bf58      	it	pl
 8004878:	6963      	ldrpl	r3, [r4, #20]
 800487a:	60a3      	str	r3, [r4, #8]
 800487c:	e7f4      	b.n	8004868 <__swsetup_r+0xb0>
 800487e:	2000      	movs	r0, #0
 8004880:	e7f7      	b.n	8004872 <__swsetup_r+0xba>
 8004882:	bf00      	nop
 8004884:	20000088 	.word	0x20000088
 8004888:	08004cdc 	.word	0x08004cdc
 800488c:	08004cfc 	.word	0x08004cfc
 8004890:	08004cbc 	.word	0x08004cbc

08004894 <_close_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4d06      	ldr	r5, [pc, #24]	; (80048b0 <_close_r+0x1c>)
 8004898:	2300      	movs	r3, #0
 800489a:	4604      	mov	r4, r0
 800489c:	4608      	mov	r0, r1
 800489e:	602b      	str	r3, [r5, #0]
 80048a0:	f7fc fe98 	bl	80015d4 <_close>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d102      	bne.n	80048ae <_close_r+0x1a>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	b103      	cbz	r3, 80048ae <_close_r+0x1a>
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	20000928 	.word	0x20000928

080048b4 <__sflush_r>:
 80048b4:	898a      	ldrh	r2, [r1, #12]
 80048b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ba:	4605      	mov	r5, r0
 80048bc:	0710      	lsls	r0, r2, #28
 80048be:	460c      	mov	r4, r1
 80048c0:	d458      	bmi.n	8004974 <__sflush_r+0xc0>
 80048c2:	684b      	ldr	r3, [r1, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	dc05      	bgt.n	80048d4 <__sflush_r+0x20>
 80048c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	dc02      	bgt.n	80048d4 <__sflush_r+0x20>
 80048ce:	2000      	movs	r0, #0
 80048d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048d6:	2e00      	cmp	r6, #0
 80048d8:	d0f9      	beq.n	80048ce <__sflush_r+0x1a>
 80048da:	2300      	movs	r3, #0
 80048dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048e0:	682f      	ldr	r7, [r5, #0]
 80048e2:	602b      	str	r3, [r5, #0]
 80048e4:	d032      	beq.n	800494c <__sflush_r+0x98>
 80048e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	075a      	lsls	r2, r3, #29
 80048ec:	d505      	bpl.n	80048fa <__sflush_r+0x46>
 80048ee:	6863      	ldr	r3, [r4, #4]
 80048f0:	1ac0      	subs	r0, r0, r3
 80048f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048f4:	b10b      	cbz	r3, 80048fa <__sflush_r+0x46>
 80048f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048f8:	1ac0      	subs	r0, r0, r3
 80048fa:	2300      	movs	r3, #0
 80048fc:	4602      	mov	r2, r0
 80048fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004900:	6a21      	ldr	r1, [r4, #32]
 8004902:	4628      	mov	r0, r5
 8004904:	47b0      	blx	r6
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	d106      	bne.n	800491a <__sflush_r+0x66>
 800490c:	6829      	ldr	r1, [r5, #0]
 800490e:	291d      	cmp	r1, #29
 8004910:	d82c      	bhi.n	800496c <__sflush_r+0xb8>
 8004912:	4a2a      	ldr	r2, [pc, #168]	; (80049bc <__sflush_r+0x108>)
 8004914:	40ca      	lsrs	r2, r1
 8004916:	07d6      	lsls	r6, r2, #31
 8004918:	d528      	bpl.n	800496c <__sflush_r+0xb8>
 800491a:	2200      	movs	r2, #0
 800491c:	6062      	str	r2, [r4, #4]
 800491e:	04d9      	lsls	r1, r3, #19
 8004920:	6922      	ldr	r2, [r4, #16]
 8004922:	6022      	str	r2, [r4, #0]
 8004924:	d504      	bpl.n	8004930 <__sflush_r+0x7c>
 8004926:	1c42      	adds	r2, r0, #1
 8004928:	d101      	bne.n	800492e <__sflush_r+0x7a>
 800492a:	682b      	ldr	r3, [r5, #0]
 800492c:	b903      	cbnz	r3, 8004930 <__sflush_r+0x7c>
 800492e:	6560      	str	r0, [r4, #84]	; 0x54
 8004930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004932:	602f      	str	r7, [r5, #0]
 8004934:	2900      	cmp	r1, #0
 8004936:	d0ca      	beq.n	80048ce <__sflush_r+0x1a>
 8004938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800493c:	4299      	cmp	r1, r3
 800493e:	d002      	beq.n	8004946 <__sflush_r+0x92>
 8004940:	4628      	mov	r0, r5
 8004942:	f000 f8fd 	bl	8004b40 <_free_r>
 8004946:	2000      	movs	r0, #0
 8004948:	6360      	str	r0, [r4, #52]	; 0x34
 800494a:	e7c1      	b.n	80048d0 <__sflush_r+0x1c>
 800494c:	6a21      	ldr	r1, [r4, #32]
 800494e:	2301      	movs	r3, #1
 8004950:	4628      	mov	r0, r5
 8004952:	47b0      	blx	r6
 8004954:	1c41      	adds	r1, r0, #1
 8004956:	d1c7      	bne.n	80048e8 <__sflush_r+0x34>
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0c4      	beq.n	80048e8 <__sflush_r+0x34>
 800495e:	2b1d      	cmp	r3, #29
 8004960:	d001      	beq.n	8004966 <__sflush_r+0xb2>
 8004962:	2b16      	cmp	r3, #22
 8004964:	d101      	bne.n	800496a <__sflush_r+0xb6>
 8004966:	602f      	str	r7, [r5, #0]
 8004968:	e7b1      	b.n	80048ce <__sflush_r+0x1a>
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004970:	81a3      	strh	r3, [r4, #12]
 8004972:	e7ad      	b.n	80048d0 <__sflush_r+0x1c>
 8004974:	690f      	ldr	r7, [r1, #16]
 8004976:	2f00      	cmp	r7, #0
 8004978:	d0a9      	beq.n	80048ce <__sflush_r+0x1a>
 800497a:	0793      	lsls	r3, r2, #30
 800497c:	680e      	ldr	r6, [r1, #0]
 800497e:	bf08      	it	eq
 8004980:	694b      	ldreq	r3, [r1, #20]
 8004982:	600f      	str	r7, [r1, #0]
 8004984:	bf18      	it	ne
 8004986:	2300      	movne	r3, #0
 8004988:	eba6 0807 	sub.w	r8, r6, r7
 800498c:	608b      	str	r3, [r1, #8]
 800498e:	f1b8 0f00 	cmp.w	r8, #0
 8004992:	dd9c      	ble.n	80048ce <__sflush_r+0x1a>
 8004994:	6a21      	ldr	r1, [r4, #32]
 8004996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004998:	4643      	mov	r3, r8
 800499a:	463a      	mov	r2, r7
 800499c:	4628      	mov	r0, r5
 800499e:	47b0      	blx	r6
 80049a0:	2800      	cmp	r0, #0
 80049a2:	dc06      	bgt.n	80049b2 <__sflush_r+0xfe>
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049aa:	81a3      	strh	r3, [r4, #12]
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	e78e      	b.n	80048d0 <__sflush_r+0x1c>
 80049b2:	4407      	add	r7, r0
 80049b4:	eba8 0800 	sub.w	r8, r8, r0
 80049b8:	e7e9      	b.n	800498e <__sflush_r+0xda>
 80049ba:	bf00      	nop
 80049bc:	20400001 	.word	0x20400001

080049c0 <_fflush_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	690b      	ldr	r3, [r1, #16]
 80049c4:	4605      	mov	r5, r0
 80049c6:	460c      	mov	r4, r1
 80049c8:	b913      	cbnz	r3, 80049d0 <_fflush_r+0x10>
 80049ca:	2500      	movs	r5, #0
 80049cc:	4628      	mov	r0, r5
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	b118      	cbz	r0, 80049da <_fflush_r+0x1a>
 80049d2:	6983      	ldr	r3, [r0, #24]
 80049d4:	b90b      	cbnz	r3, 80049da <_fflush_r+0x1a>
 80049d6:	f7ff fa15 	bl	8003e04 <__sinit>
 80049da:	4b14      	ldr	r3, [pc, #80]	; (8004a2c <_fflush_r+0x6c>)
 80049dc:	429c      	cmp	r4, r3
 80049de:	d11b      	bne.n	8004a18 <_fflush_r+0x58>
 80049e0:	686c      	ldr	r4, [r5, #4]
 80049e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0ef      	beq.n	80049ca <_fflush_r+0xa>
 80049ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049ec:	07d0      	lsls	r0, r2, #31
 80049ee:	d404      	bmi.n	80049fa <_fflush_r+0x3a>
 80049f0:	0599      	lsls	r1, r3, #22
 80049f2:	d402      	bmi.n	80049fa <_fflush_r+0x3a>
 80049f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049f6:	f7ff faa3 	bl	8003f40 <__retarget_lock_acquire_recursive>
 80049fa:	4628      	mov	r0, r5
 80049fc:	4621      	mov	r1, r4
 80049fe:	f7ff ff59 	bl	80048b4 <__sflush_r>
 8004a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a04:	07da      	lsls	r2, r3, #31
 8004a06:	4605      	mov	r5, r0
 8004a08:	d4e0      	bmi.n	80049cc <_fflush_r+0xc>
 8004a0a:	89a3      	ldrh	r3, [r4, #12]
 8004a0c:	059b      	lsls	r3, r3, #22
 8004a0e:	d4dd      	bmi.n	80049cc <_fflush_r+0xc>
 8004a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a12:	f7ff fa96 	bl	8003f42 <__retarget_lock_release_recursive>
 8004a16:	e7d9      	b.n	80049cc <_fflush_r+0xc>
 8004a18:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <_fflush_r+0x70>)
 8004a1a:	429c      	cmp	r4, r3
 8004a1c:	d101      	bne.n	8004a22 <_fflush_r+0x62>
 8004a1e:	68ac      	ldr	r4, [r5, #8]
 8004a20:	e7df      	b.n	80049e2 <_fflush_r+0x22>
 8004a22:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <_fflush_r+0x74>)
 8004a24:	429c      	cmp	r4, r3
 8004a26:	bf08      	it	eq
 8004a28:	68ec      	ldreq	r4, [r5, #12]
 8004a2a:	e7da      	b.n	80049e2 <_fflush_r+0x22>
 8004a2c:	08004cdc 	.word	0x08004cdc
 8004a30:	08004cfc 	.word	0x08004cfc
 8004a34:	08004cbc 	.word	0x08004cbc

08004a38 <_lseek_r>:
 8004a38:	b538      	push	{r3, r4, r5, lr}
 8004a3a:	4d07      	ldr	r5, [pc, #28]	; (8004a58 <_lseek_r+0x20>)
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	4608      	mov	r0, r1
 8004a40:	4611      	mov	r1, r2
 8004a42:	2200      	movs	r2, #0
 8004a44:	602a      	str	r2, [r5, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f7fc fdeb 	bl	8001622 <_lseek>
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d102      	bne.n	8004a56 <_lseek_r+0x1e>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	b103      	cbz	r3, 8004a56 <_lseek_r+0x1e>
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	bd38      	pop	{r3, r4, r5, pc}
 8004a58:	20000928 	.word	0x20000928

08004a5c <__swhatbuf_r>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	460e      	mov	r6, r1
 8004a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a64:	2900      	cmp	r1, #0
 8004a66:	b096      	sub	sp, #88	; 0x58
 8004a68:	4614      	mov	r4, r2
 8004a6a:	461d      	mov	r5, r3
 8004a6c:	da08      	bge.n	8004a80 <__swhatbuf_r+0x24>
 8004a6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	602a      	str	r2, [r5, #0]
 8004a76:	061a      	lsls	r2, r3, #24
 8004a78:	d410      	bmi.n	8004a9c <__swhatbuf_r+0x40>
 8004a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a7e:	e00e      	b.n	8004a9e <__swhatbuf_r+0x42>
 8004a80:	466a      	mov	r2, sp
 8004a82:	f000 f8bb 	bl	8004bfc <_fstat_r>
 8004a86:	2800      	cmp	r0, #0
 8004a88:	dbf1      	blt.n	8004a6e <__swhatbuf_r+0x12>
 8004a8a:	9a01      	ldr	r2, [sp, #4]
 8004a8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a94:	425a      	negs	r2, r3
 8004a96:	415a      	adcs	r2, r3
 8004a98:	602a      	str	r2, [r5, #0]
 8004a9a:	e7ee      	b.n	8004a7a <__swhatbuf_r+0x1e>
 8004a9c:	2340      	movs	r3, #64	; 0x40
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	b016      	add	sp, #88	; 0x58
 8004aa4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004aa8 <__smakebuf_r>:
 8004aa8:	898b      	ldrh	r3, [r1, #12]
 8004aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004aac:	079d      	lsls	r5, r3, #30
 8004aae:	4606      	mov	r6, r0
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	d507      	bpl.n	8004ac4 <__smakebuf_r+0x1c>
 8004ab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	6123      	str	r3, [r4, #16]
 8004abc:	2301      	movs	r3, #1
 8004abe:	6163      	str	r3, [r4, #20]
 8004ac0:	b002      	add	sp, #8
 8004ac2:	bd70      	pop	{r4, r5, r6, pc}
 8004ac4:	ab01      	add	r3, sp, #4
 8004ac6:	466a      	mov	r2, sp
 8004ac8:	f7ff ffc8 	bl	8004a5c <__swhatbuf_r>
 8004acc:	9900      	ldr	r1, [sp, #0]
 8004ace:	4605      	mov	r5, r0
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f7ff fa57 	bl	8003f84 <_malloc_r>
 8004ad6:	b948      	cbnz	r0, 8004aec <__smakebuf_r+0x44>
 8004ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004adc:	059a      	lsls	r2, r3, #22
 8004ade:	d4ef      	bmi.n	8004ac0 <__smakebuf_r+0x18>
 8004ae0:	f023 0303 	bic.w	r3, r3, #3
 8004ae4:	f043 0302 	orr.w	r3, r3, #2
 8004ae8:	81a3      	strh	r3, [r4, #12]
 8004aea:	e7e3      	b.n	8004ab4 <__smakebuf_r+0xc>
 8004aec:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <__smakebuf_r+0x7c>)
 8004aee:	62b3      	str	r3, [r6, #40]	; 0x28
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	6020      	str	r0, [r4, #0]
 8004af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af8:	81a3      	strh	r3, [r4, #12]
 8004afa:	9b00      	ldr	r3, [sp, #0]
 8004afc:	6163      	str	r3, [r4, #20]
 8004afe:	9b01      	ldr	r3, [sp, #4]
 8004b00:	6120      	str	r0, [r4, #16]
 8004b02:	b15b      	cbz	r3, 8004b1c <__smakebuf_r+0x74>
 8004b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b08:	4630      	mov	r0, r6
 8004b0a:	f000 f889 	bl	8004c20 <_isatty_r>
 8004b0e:	b128      	cbz	r0, 8004b1c <__smakebuf_r+0x74>
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	f023 0303 	bic.w	r3, r3, #3
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	89a0      	ldrh	r0, [r4, #12]
 8004b1e:	4305      	orrs	r5, r0
 8004b20:	81a5      	strh	r5, [r4, #12]
 8004b22:	e7cd      	b.n	8004ac0 <__smakebuf_r+0x18>
 8004b24:	08003d9d 	.word	0x08003d9d

08004b28 <__malloc_lock>:
 8004b28:	4801      	ldr	r0, [pc, #4]	; (8004b30 <__malloc_lock+0x8>)
 8004b2a:	f7ff ba09 	b.w	8003f40 <__retarget_lock_acquire_recursive>
 8004b2e:	bf00      	nop
 8004b30:	2000091c 	.word	0x2000091c

08004b34 <__malloc_unlock>:
 8004b34:	4801      	ldr	r0, [pc, #4]	; (8004b3c <__malloc_unlock+0x8>)
 8004b36:	f7ff ba04 	b.w	8003f42 <__retarget_lock_release_recursive>
 8004b3a:	bf00      	nop
 8004b3c:	2000091c 	.word	0x2000091c

08004b40 <_free_r>:
 8004b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b42:	2900      	cmp	r1, #0
 8004b44:	d044      	beq.n	8004bd0 <_free_r+0x90>
 8004b46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b4a:	9001      	str	r0, [sp, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f1a1 0404 	sub.w	r4, r1, #4
 8004b52:	bfb8      	it	lt
 8004b54:	18e4      	addlt	r4, r4, r3
 8004b56:	f7ff ffe7 	bl	8004b28 <__malloc_lock>
 8004b5a:	4a1e      	ldr	r2, [pc, #120]	; (8004bd4 <_free_r+0x94>)
 8004b5c:	9801      	ldr	r0, [sp, #4]
 8004b5e:	6813      	ldr	r3, [r2, #0]
 8004b60:	b933      	cbnz	r3, 8004b70 <_free_r+0x30>
 8004b62:	6063      	str	r3, [r4, #4]
 8004b64:	6014      	str	r4, [r2, #0]
 8004b66:	b003      	add	sp, #12
 8004b68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b6c:	f7ff bfe2 	b.w	8004b34 <__malloc_unlock>
 8004b70:	42a3      	cmp	r3, r4
 8004b72:	d908      	bls.n	8004b86 <_free_r+0x46>
 8004b74:	6825      	ldr	r5, [r4, #0]
 8004b76:	1961      	adds	r1, r4, r5
 8004b78:	428b      	cmp	r3, r1
 8004b7a:	bf01      	itttt	eq
 8004b7c:	6819      	ldreq	r1, [r3, #0]
 8004b7e:	685b      	ldreq	r3, [r3, #4]
 8004b80:	1949      	addeq	r1, r1, r5
 8004b82:	6021      	streq	r1, [r4, #0]
 8004b84:	e7ed      	b.n	8004b62 <_free_r+0x22>
 8004b86:	461a      	mov	r2, r3
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	b10b      	cbz	r3, 8004b90 <_free_r+0x50>
 8004b8c:	42a3      	cmp	r3, r4
 8004b8e:	d9fa      	bls.n	8004b86 <_free_r+0x46>
 8004b90:	6811      	ldr	r1, [r2, #0]
 8004b92:	1855      	adds	r5, r2, r1
 8004b94:	42a5      	cmp	r5, r4
 8004b96:	d10b      	bne.n	8004bb0 <_free_r+0x70>
 8004b98:	6824      	ldr	r4, [r4, #0]
 8004b9a:	4421      	add	r1, r4
 8004b9c:	1854      	adds	r4, r2, r1
 8004b9e:	42a3      	cmp	r3, r4
 8004ba0:	6011      	str	r1, [r2, #0]
 8004ba2:	d1e0      	bne.n	8004b66 <_free_r+0x26>
 8004ba4:	681c      	ldr	r4, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	6053      	str	r3, [r2, #4]
 8004baa:	4421      	add	r1, r4
 8004bac:	6011      	str	r1, [r2, #0]
 8004bae:	e7da      	b.n	8004b66 <_free_r+0x26>
 8004bb0:	d902      	bls.n	8004bb8 <_free_r+0x78>
 8004bb2:	230c      	movs	r3, #12
 8004bb4:	6003      	str	r3, [r0, #0]
 8004bb6:	e7d6      	b.n	8004b66 <_free_r+0x26>
 8004bb8:	6825      	ldr	r5, [r4, #0]
 8004bba:	1961      	adds	r1, r4, r5
 8004bbc:	428b      	cmp	r3, r1
 8004bbe:	bf04      	itt	eq
 8004bc0:	6819      	ldreq	r1, [r3, #0]
 8004bc2:	685b      	ldreq	r3, [r3, #4]
 8004bc4:	6063      	str	r3, [r4, #4]
 8004bc6:	bf04      	itt	eq
 8004bc8:	1949      	addeq	r1, r1, r5
 8004bca:	6021      	streq	r1, [r4, #0]
 8004bcc:	6054      	str	r4, [r2, #4]
 8004bce:	e7ca      	b.n	8004b66 <_free_r+0x26>
 8004bd0:	b003      	add	sp, #12
 8004bd2:	bd30      	pop	{r4, r5, pc}
 8004bd4:	20000920 	.word	0x20000920

08004bd8 <_read_r>:
 8004bd8:	b538      	push	{r3, r4, r5, lr}
 8004bda:	4d07      	ldr	r5, [pc, #28]	; (8004bf8 <_read_r+0x20>)
 8004bdc:	4604      	mov	r4, r0
 8004bde:	4608      	mov	r0, r1
 8004be0:	4611      	mov	r1, r2
 8004be2:	2200      	movs	r2, #0
 8004be4:	602a      	str	r2, [r5, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	f7fc fcbb 	bl	8001562 <_read>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	d102      	bne.n	8004bf6 <_read_r+0x1e>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	b103      	cbz	r3, 8004bf6 <_read_r+0x1e>
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	bd38      	pop	{r3, r4, r5, pc}
 8004bf8:	20000928 	.word	0x20000928

08004bfc <_fstat_r>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4d07      	ldr	r5, [pc, #28]	; (8004c1c <_fstat_r+0x20>)
 8004c00:	2300      	movs	r3, #0
 8004c02:	4604      	mov	r4, r0
 8004c04:	4608      	mov	r0, r1
 8004c06:	4611      	mov	r1, r2
 8004c08:	602b      	str	r3, [r5, #0]
 8004c0a:	f7fc fcef 	bl	80015ec <_fstat>
 8004c0e:	1c43      	adds	r3, r0, #1
 8004c10:	d102      	bne.n	8004c18 <_fstat_r+0x1c>
 8004c12:	682b      	ldr	r3, [r5, #0]
 8004c14:	b103      	cbz	r3, 8004c18 <_fstat_r+0x1c>
 8004c16:	6023      	str	r3, [r4, #0]
 8004c18:	bd38      	pop	{r3, r4, r5, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000928 	.word	0x20000928

08004c20 <_isatty_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	4d06      	ldr	r5, [pc, #24]	; (8004c3c <_isatty_r+0x1c>)
 8004c24:	2300      	movs	r3, #0
 8004c26:	4604      	mov	r4, r0
 8004c28:	4608      	mov	r0, r1
 8004c2a:	602b      	str	r3, [r5, #0]
 8004c2c:	f7fc fcee 	bl	800160c <_isatty>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d102      	bne.n	8004c3a <_isatty_r+0x1a>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	b103      	cbz	r3, 8004c3a <_isatty_r+0x1a>
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	20000928 	.word	0x20000928

08004c40 <_init>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	bf00      	nop
 8004c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c46:	bc08      	pop	{r3}
 8004c48:	469e      	mov	lr, r3
 8004c4a:	4770      	bx	lr

08004c4c <_fini>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	bf00      	nop
 8004c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c52:	bc08      	pop	{r3}
 8004c54:	469e      	mov	lr, r3
 8004c56:	4770      	bx	lr
